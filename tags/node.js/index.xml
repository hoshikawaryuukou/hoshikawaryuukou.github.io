<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Node.js on 識之箱庭</title><link>https://HoshikawaRyuukou.github.io/tags/node.js/</link><description>Recent content in Node.js on 識之箱庭</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>HoshikawaRyuukou</copyright><lastBuildDate>Sun, 06 Oct 2024 20:31:00 +0000</lastBuildDate><atom:link href="https://HoshikawaRyuukou.github.io/tags/node.js/index.xml" rel="self" type="application/rss+xml"/><item><title>Workflow - Building a monorepo with pnpm</title><link>https://HoshikawaRyuukou.github.io/posts/workflow-building-a-monorepo-with-pnpm/</link><pubDate>Sun, 06 Oct 2024 20:31:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/workflow-building-a-monorepo-with-pnpm/</guid><description>Guide Monorepo与pnpm：前端项目管理的完美搭档 为什么 pnpm+monorepo 是组件库项目的最佳实践 Monorepo？來聊聊另一種專案管理架構吧！ 从npm版本依赖到Monorepo大仓项目 MonoRepo实战：pnpm+nx搭建MonoRepo项目 專案基本結構 project-root/ # 專案根目錄 ├── pnpm-workspace.yaml # pnpm 的工作區配置文件，用來定義哪些資料夾屬於工作區範圍 ├── package.json # 專案的全局配置文件，通常包括依賴、腳本和項目元數據 └── packages/ # 所有子包的資料夾，存放具體的子項目 ├── pkg01/ # 子包01，包含它自己的 package.json 文件和代碼 └── pkg02/ # 子包02，與 pkg01 結構相似，也擁有自己的 package.json 和代碼 新增 專案內全局配置 ./package.json # 產生一個基本的 package.json pnpm init monorepo 的全局 package.json 設置 &amp;quot;private&amp;quot;: true { &amp;#34;private&amp;#34;: true, } 新增 工作區配置文件 ./pnpm-workspace.yaml 該檔案聲明這是一個 Monorepo 專案。 pnpm install 自動安裝所有 package 的相依套件。 packages 字段列出了工作區包含的 package 位置。 工作區下的 package 會有各自的 package.</description></item><item><title>Workflow - Setting up pnpm</title><link>https://HoshikawaRyuukou.github.io/posts/workflow-setting-up-pnpm/</link><pubDate>Sun, 06 Oct 2024 20:21:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/workflow-setting-up-pnpm/</guid><description>全域安裝 npm install -g pnpm Windows 環境 ⚠️ 使用 PowerShell 系統管理員 Get-ExecutionPolicy # 如果為 Restricted 則繼續進行 Set-ExecutionPolicy RemoteSigned</description></item><item><title>Workflow - Installing a private npm package from Github Packages</title><link>https://HoshikawaRyuukou.github.io/posts/workflow-installing-a-private-npm-package-from-github-packages/</link><pubDate>Sun, 06 Oct 2024 20:12:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/workflow-installing-a-private-npm-package-from-github-packages/</guid><description>Requirement ⚠️ 向 github 組織索取訪問用的 token ⚠️ 本範例使用 npm，之後會轉使用 pnpm Window 環境變數設置 token setx GITHUB_TOKEN ghp_xxxxxxxxxxxxxxxxxxxxxxxx ⚠️ 設置後必要時重啟終端機以確保環境變數被應用 初始化 project cd project-directory npm init -y 新增 ./.npmrc ⚠️ 這裡的第二行註解是正規寫法，有特殊用途 @xxx:registry=https://npm.pkg.github.com //npm.pkg.github.com/:_authToken=&amp;#34;${GITHUB_TOKEN}&amp;#34; 安裝 package npm install @ooxx/xxx</description></item><item><title>Workflow - Publishing a private npm package to Github Packages</title><link>https://HoshikawaRyuukou.github.io/posts/workflow-publishing-a-private-package-to-github-packages/</link><pubDate>Sun, 06 Oct 2024 20:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/workflow-publishing-a-private-package-to-github-packages/</guid><description>Requirement ⚠️ 請先確保 package 本身已是合規的配置(exports/typesVersions/files/&amp;hellip;)。 ⚠️ 本範例使用 npm，之後會轉使用 pnpm。 package.json 的必要配置 name : 需配置 @scope version : 版本號 { &amp;#34;name&amp;#34;: &amp;#34;@xxx/oooo&amp;#34;, &amp;#34;version&amp;#34;: &amp;#34;0.1.0&amp;#34;, } 新增 ./.npmrc @xxx:registry=https://npm.pkg.github.com 編寫 ./.github/workflows/publish-package.yml name: Publish Package on: workflow_dispatch: push: branches: - main jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v4 - uses: actions/setup-node@v4 with: node-version: &amp;#39;20&amp;#39; registry-url: &amp;#39;https://npm.pkg.github.com/&amp;#39; - run: npm ci - run: npm run build - run: npm publish env: NODE_AUTH_TOKEN: ${{ secrets.</description></item><item><title>Node.js - Package Manager - pnpm</title><link>https://HoshikawaRyuukou.github.io/posts/node.js-package-manager-pnpm/</link><pubDate>Sat, 07 Sep 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/node.js-package-manager-pnpm/</guid><description>Guide pnpm 为什么现在我更推荐 pnpm 而不是 npm/yarn? pnpm、npm、yarn 包管理工具『优劣对比』及『环境迁移』 从pnpm工具了解整个npm包核心管理原理 為什麼 pnpm 比 npm 更快且更省空間？ Install npm i -g pnpm npm i -g pnpm@latest pnpm self-update 管理 Node.js 的執行環境 pnpm env use &amp;ndash;global lts : 安裝並使用 LTS 版本 pnpm env use &amp;ndash;global {version} : 安裝並使用指定版本 pnpm env add &amp;ndash;global {version} : 僅安裝指定版本 pnpm env remove &amp;ndash;global {version} : 移除指定版本 pnpm env list : 列舉本地所有版本 pnpm env list : 列出線上可用的版本 管理 packages pnpm outdated : 檢查套件是否有更新 pnpm update &amp;ndash;latest : 更新所有依賴至最新 pnpm store prune : 會清理掉不再被專案引用的包 workspace 指令/參數 pnpm add -wD &amp;lt;pkg&amp;gt; : 添加依賴於工作區 pnpm remove -wD &amp;lt;pkg&amp;gt; : 移除依賴從工作區 pnpm install : 安裝所有依賴 pnpm &amp;lt;commnad&amp;gt; : 執行命令 pnpm &amp;ndash;filter &amp;lt;package_selector&amp;gt; &amp;lt;command&amp;gt; : 執行 package 命令</description></item><item><title>Node.js - package.json</title><link>https://HoshikawaRyuukou.github.io/posts/node.js-package.json/</link><pubDate>Fri, 26 Jul 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/node.js-package.json/</guid><description>Quick Chat 可以將 package.json 檔案新增到套件中，以便其他人可以輕鬆管理和安裝。發佈到註冊表的包必須包含一個 package.json 檔案。
Creating a package.json file Quick Start 根據當前目錄產生預設 package.json
npm init -y
Fields name 必須是小寫字母和一個單詞，並且可以包含連字符和下劃線
version 遵循語義版本控制準則 x.x.x
type 指定 module system 要用
ES : &amp;ldquo;module&amp;rdquo; CommonJS : &amp;ldquo;commonjs&amp;rdquo; main 當套件被作為 CommonJS 模組引入時，預設的入口點。
module 當套件被作為 ES 模組引入時，預設的入口點。
types TypeScript 的類型定義檔案位置，提供 TypeScript 支援。
exports 是一個較新的欄位，用來細化和取代傳統的 main 和 module 欄位。它允許你為不同的環境（例如 Node.js、ES 模組、瀏覽器）定義不同的入口點和模組格式。它還允許你控制哪些檔案可以被使用者匯入，提供更多的安全性和靈活性。
如果有 exports 欄位，Node.js 會優先使用 exports 來決定如何載入模組，只有在 exports 中沒有相應定義時，才會回退到使用 main、module 和 types 欄位。
{ &amp;#34;exports&amp;#34;: { &amp;#34;.</description></item><item><title>Node.js - Packages</title><link>https://HoshikawaRyuukou.github.io/posts/node.js-packages/</link><pubDate>Sat, 22 Jun 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/node.js-packages/</guid><description>Package npm trends npx npx 常用於執行一次性操做，允許你在不安裝包到全局或本地的情況下直接運行該包中的可執行文件。且會檢查並執行最新版本的包，確保你不會因為本地包過時而遇到問題。
Benchmark tinybench CLI chalk cli-table3 tsx: 替代 node 指令、支持运行 TypeScript &amp;amp; ESM 的 CLI 程序 console-table-printer Git degit degit简介 IO rimraf Rimraf详细介绍 IoC InversifyJS Multitasking workerpool Test Vitest Validation zod</description></item><item><title>Node.js - Note</title><link>https://HoshikawaRyuukou.github.io/posts/node.js-note/</link><pubDate>Sun, 26 May 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/node.js-note/</guid><description>Guide Node.js究竟是什么？初学者指南 coreybutler/nvm-windows nvm-windows 管理 Windows Node.js 版本 [指令] npm cli &amp;amp; package.json 解决Node.js的命令行输出中文乱码问题（也适用于Electron） Module 什麼是前端模組化？ Multitasking Worker Threads in Node.JS Worker Threads : Multitasking in NodeJS Node.js Worker Threads Vs. Child Processes: Which one should you use?</description></item></channel></rss>