<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Node.js on 識之箱庭</title><link>https://HoshikawaRyuukou.github.io/tags/node.js/</link><description>Recent content in Node.js on 識之箱庭</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>HoshikawaRyuukou</copyright><lastBuildDate>Sat, 07 Sep 2024 21:11:00 +0000</lastBuildDate><atom:link href="https://HoshikawaRyuukou.github.io/tags/node.js/index.xml" rel="self" type="application/rss+xml"/><item><title>Node.js - Package Manager - pnpm</title><link>https://HoshikawaRyuukou.github.io/posts/node.js-package-manager-pnpm/</link><pubDate>Sat, 07 Sep 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/node.js-package-manager-pnpm/</guid><description>Doc pnpm Guide 为什么现在我更推荐 pnpm 而不是 npm/yarn? pnpm、npm、yarn 包管理工具『优劣对比』及『环境迁移』 从pnpm工具了解整个npm包核心管理原理 為什麼 pnpm 比 npm 更快且更省空間？ Install npm i -g pnpm npm i -g pnpm@latest pnpm self-update 管理 Node.js 的執行環境 pnpm env use &amp;ndash;global lts : 安裝並使用 LTS 版本 pnpm env use &amp;ndash;global {version} : 安裝並使用指定版本 pnpm env add &amp;ndash;global {version} : 僅安裝指定版本 pnpm env remove &amp;ndash;global {version} : 移除指定版本 pnpm env list : 列舉本地所有版本 pnpm env list : 列出線上可用的版本 管理 packages pnpm outdated : 檢查套件是否有更新 pnpm update &amp;ndash;latest : 更新所有依賴至最新 pnpm store prune : 會清理掉不再被專案引用的包 Workspace - Monorepo Monorepo与pnpm：前端项目管理的完美搭档 为什么 pnpm+monorepo 是组件库项目的最佳实践 Monorepo？來聊聊另一種專案管理架構吧！ 从npm版本依赖到Monorepo大仓项目 MonoRepo实战：pnpm+nx搭建MonoRepo项目 特色 👍 package 使用相同版本 依賴/設定檔/風格。 ⚠️ package 權限控管需仰賴其他工作流。 配置 root package.</description></item><item><title>Node.js - package.json</title><link>https://HoshikawaRyuukou.github.io/posts/node.js-package.json/</link><pubDate>Fri, 26 Jul 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/node.js-package.json/</guid><description>Quick Chat 可以將 package.json 檔案新增到套件中，以便其他人可以輕鬆管理和安裝。發佈到註冊表的包必須包含一個 package.json 檔案。
Creating a package.json file Quick Start 根據當前目錄產生預設 package.json
npm init -y
Fields name 必須是小寫字母和一個單詞，並且可以包含連字符和下劃線
version 遵循語義版本控制準則 x.x.x
type 指定 module system 要用
ES : &amp;ldquo;module&amp;rdquo; CommonJS : &amp;ldquo;commonjs&amp;rdquo; main 當套件被作為 CommonJS 模組引入時，預設的入口點。
module 當套件被作為 ES 模組引入時，預設的入口點。
types TypeScript 的類型定義檔案位置，提供 TypeScript 支援。
exports 是一個較新的欄位，用來細化和取代傳統的 main 和 module 欄位。它允許你為不同的環境（例如 Node.js、ES 模組、瀏覽器）定義不同的入口點和模組格式。它還允許你控制哪些檔案可以被使用者匯入，提供更多的安全性和靈活性。
如果有 exports 欄位，Node.js 會優先使用 exports 來決定如何載入模組，只有在 exports 中沒有相應定義時，才會回退到使用 main、module 和 types 欄位。
{ &amp;#34;exports&amp;#34;: { &amp;#34;.</description></item><item><title>Node.js - Packages</title><link>https://HoshikawaRyuukou.github.io/posts/node.js-packages/</link><pubDate>Sat, 22 Jun 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/node.js-packages/</guid><description>Package npm trends npx npx 常用於執行一次性操做，允許你在不安裝包到全局或本地的情況下直接運行該包中的可執行文件。且會檢查並執行最新版本的包，確保你不會因為本地包過時而遇到問題。
Benchmark tinybench CLI chalk cli-table3 tsx: 替代 node 指令、支持运行 TypeScript &amp;amp; ESM 的 CLI 程序 IO rimraf Rimraf详细介绍 IoC InversifyJS Multitasking workerpool Test Vitest Validation zod</description></item><item><title>Node.js - Note</title><link>https://HoshikawaRyuukou.github.io/posts/node.js-note/</link><pubDate>Sun, 26 May 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/node.js-note/</guid><description> Guide Node.js究竟是什么？初学者指南 coreybutler/nvm-windows nvm-windows 管理 Windows Node.js 版本 [指令] npm cli &amp;amp; package.json 解决Node.js的命令行输出中文乱码问题（也适用于Electron） Module 什麼是前端模組化？ Multitasking Worker Threads in Node.JS Worker Threads : Multitasking in NodeJS Node.js Worker Threads Vs. Child Processes: Which one should you use? Vite Vite 是什麼? 為什麼要用 Vite? 它解決了哪些問題? 又是如何解決?</description></item></channel></rss>