<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Node.js on 識之箱庭</title><link>https://HoshikawaRyuukou.github.io/tags/node.js/</link><description>Recent content in Node.js on 識之箱庭</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>HoshikawaRyuukou</copyright><lastBuildDate>Thu, 18 Jul 2024 21:11:00 +0000</lastBuildDate><atom:link href="https://HoshikawaRyuukou.github.io/tags/node.js/index.xml" rel="self" type="application/rss+xml"/><item><title>Node.js - NPM - pnpm</title><link>https://HoshikawaRyuukou.github.io/posts/node.js-pnpm/</link><pubDate>Thu, 18 Jul 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/node.js-pnpm/</guid><description>Doc pnpm Guide 为什么现在我更推荐 pnpm 而不是 npm/yarn? pnpm、npm、yarn 包管理工具『优劣对比』及『环境迁移』 从pnpm工具了解整个npm包核心管理原理 為什麼 pnpm 比 npm 更快且更省空間？ Install npm i -g pnpm Workspace - Monorepo Monorepo与pnpm：前端项目管理的完美搭档 为什么 pnpm+monorepo 是组件库项目的最佳实践 Monorepo？來聊聊另一種專案管理架構吧！ 从npm版本依赖到Monorepo大仓项目 MonoRepo实战：pnpm+nx搭建MonoRepo项目 特色 👍 package 使用相同版本 依賴/設定檔/風格。 ⚠️ package 權限控管需仰賴其他工作流。 配置 root package.json 以下指令產生一個基本的 package.json
pnpm init 配置 pnpm-workspace.yaml 該檔案聲明這是一個 Monorepo 專案。工作區下的 package 會有各自的 package.json，並且執行 pnpm install 時自動安裝所有 package 的相依套件。
packages: - &amp;#39;packages/*&amp;#39; packages 字段列出了工作區包含的 package 位置。 專案基本結構 - Git - pnpm-workspace.yaml - package.</description></item><item><title>Node.js - Package - Commitlint &amp; Commitizen</title><link>https://HoshikawaRyuukou.github.io/posts/node.js-package-commitizen-commitlint/</link><pubDate>Fri, 12 Jul 2024 08:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/node.js-package-commitizen-commitlint/</guid><description>Quick Chat Commitlint 是一個用來檢查 git commit 信息格式的工具，它可以配合多種規範使用。
Commitizen 則是一個幫助你格式化 git commit 信息的工具，依照預設的格式進行規範。
Guide commitlint commitlint doc cz-cli 對於 Windows 使用者：確保所有 husky 檔案均已UTF-8編碼。如果使用任何其他格式，則可能會在執行時拋出錯誤，例如無法執行二進位檔案。
Install Commitlint npm install --save-dev @commitlint/{cli,config-conventional} Configuration - commitlint.config.js export default { extends: [&amp;#39;@commitlint/config-conventional&amp;#39;] }; Configuration - .husky/commit-msg npx --no-install commitlint --edit $1 Install Commitizen npm install -g commitizen commitizen init cz-conventional-changelog --save-dev --save-exact Run Commitizen git cz</description></item><item><title>Node.js - Package - Lint-staged</title><link>https://HoshikawaRyuukou.github.io/posts/node.js-package-lint-staged/</link><pubDate>Thu, 11 Jul 2024 08:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/node.js-package-lint-staged/</guid><description>Quick Chat lint-staged 可以只對 git staged 的檔案執行 lint 檢查，進而提升檢查效率。
Guide lint-staged 值得注意的是跟 Prettier 搭配使用，必須確保 ESLint 在 Prettier 前面先執行。
Install npm install --save-dev lint-staged Configuration - package.json { &amp;#34;scripts&amp;#34;: { ... }, &amp;#34;lint-staged&amp;#34;: { &amp;#34;*.{ts,js}&amp;#34;: [ &amp;#34;eslint&amp;#34; ] } } Configuration - .husky/pre-commit npx lint-staged</description></item><item><title>Node.js - Package - Husky</title><link>https://HoshikawaRyuukou.github.io/posts/node.js-package-husky/</link><pubDate>Fri, 05 Jul 2024 08:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/node.js-package-husky/</guid><description>Quick Chat Husky 是一個用來在 Git 針對特定事件觸發自動執行腳本的工具，它的主要用途是確保在開發過程中執行特定的檢查或操作，例如代碼格式化、Lint 檢查、測試執行等。這些操作通常在開發人員 commit 或 push 代碼之前執行，從而提高代碼質量並避免不合規代碼進入代碼庫。
Guide Husky Doc 每周轮子之 husky：统一规范团队 Git Hooks Install npm install --save-dev husky Configuration - 初始化 npx husky init 會在 .husky/ 中創建 pre-commit 腳本 更新 package.json 中的 prepare 腳本</description></item><item><title>Node.js - Package - Prettier</title><link>https://HoshikawaRyuukou.github.io/posts/node.js-package-prettier/</link><pubDate>Tue, 02 Jul 2024 08:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/node.js-package-prettier/</guid><description>Quick Chat Prettier 是一個代碼格式化工具，用於保持代碼風格一致。
Guide Prettier · Opinionated Code Formatter Install npm install -D prettier eslint-plugin-prettier eslint-config-prettier eslint-plugin-prettier : ESLint 插件，用於將 Prettier 內嵌到 ESLint 中，使 ESLint 可以報告 Prettier 的格式錯誤。 eslint-config-prettier : ESLint 配置，用於關閉所有 ESLint 中的格式相關規則，以避免與 Prettier 產生衝突。 Configure .prettierrc Configuration File · Prettier Configure .prettierignore Ignoring Code · Prettier Configure eslint.config.js eslint-plugin-prettier - Configuration (new: eslint.config.js) eslint-config-prettier - eslint.config.js (flat config) import eslintConfigPrettier from &amp;#39;eslint-config-prettier&amp;#39;; import eslintPluginPrettierRecommended from &amp;#39;eslint-plugin-prettier/recommended&amp;#39;; module.exports = [ // Any other config imports go at the top eslintConfigPrettier, eslintPluginPrettierRecommended, ]; Issue 當跨平台協同的時候會有結尾符的問題 [eslint] Delete CR eslint(prettier/prettier) issue 令人困擾的git autocrlf – Opass Life 於 .</description></item><item><title>Node.js - Package - ESLint</title><link>https://HoshikawaRyuukou.github.io/posts/node.js-package-eslint/</link><pubDate>Mon, 01 Jul 2024 22:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/node.js-package-eslint/</guid><description>Quick Chat ESLint v9 已經推出一段時間了，這次更新帶來了破壞性的變化，特別是在 ESLint 配置方面。由於之前插件的支援尚未到位，所以我暫時觀望。但隨著主流前端框架的跟進使用，現在是時候進行嘗試了。
另外，從 ESLint v8.53.0 開始，官方將逐步廢除格式化規則，並預計在 v10 完全廢除。官方在這篇文章中解釋了放棄格式化規則的原因：
Deprecation of formatting rules
最後，建議使用 Prettier 作為格式化需求的替代方案。
Guide ESLint - Pluggable JavaScript Linter Introducing the ESLint Configuration Migrator 前端工程化工具系列（一）—— ESLint(v9.4.0)：代码质量守护者 基础篇 前端工程化工具系列（二）—— ESLint(v9.4.0)：代码质量守护者 进阶篇 [note] ESLint Install npx eslint --init // 執行完後會警告提示，因為 typescript-eslint 尚未正式支援 eslint v9 // 要安裝支援 eslint v9 的 typescript-eslint npm install typescript-eslint@8.0.0-alpha.39 npm outdated // 檢查是否有更新的 alpha Configuration 當前筆者使用的是標準規則，有實際需求時再回來記錄。</description></item><item><title>Node.js - Packages</title><link>https://HoshikawaRyuukou.github.io/posts/node.js-packages/</link><pubDate>Sat, 22 Jun 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/node.js-packages/</guid><description>Package npm trends npx npx 常用於執行一次性操做，允許你在不安裝包到全局或本地的情況下直接運行該包中的可執行文件。且會檢查並執行最新版本的包，確保你不會因為本地包過時而遇到問題。
CLI chalk cli-table3 tsx: 替代 node 指令、支持运行 TypeScript &amp;amp; ESM 的 CLI 程序 IO rimraf Rimraf详细介绍 IoC InversifyJS Multitasking workerpool Test Vitest</description></item><item><title>Node.js - Note</title><link>https://HoshikawaRyuukou.github.io/posts/node.js-note/</link><pubDate>Sun, 26 May 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/node.js-note/</guid><description> Guide Node.js究竟是什么？初学者指南 coreybutler/nvm-windows nvm-windows 管理 Windows Node.js 版本 [指令] npm cli &amp;amp; package.json 解决Node.js的命令行输出中文乱码问题（也适用于Electron） Module 什麼是前端模組化？ Multitasking Worker Threads in Node.JS Worker Threads : Multitasking in NodeJS Node.js Worker Threads Vs. Child Processes: Which one should you use? Vite Vite 是什麼? 為什麼要用 Vite? 它解決了哪些問題? 又是如何解決?</description></item><item><title>Node.js - Unit Test ( TypeScript + Mocha + Chai )</title><link>https://HoshikawaRyuukou.github.io/posts/node.js-unit-test-typescript-+-mocha-+-chai/</link><pubDate>Wed, 03 Apr 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/node.js-unit-test-typescript-+-mocha-+-chai/</guid><description>Guide Setup a new TypeScript project with Mocha support 如何在 TypeScript + ESM + Mocha + tsconfig-paths 下运行 Mocha 测试用例 Chai Configure npm install -D typescript mocha ts-mocha chai npm install -D @types/node npm install -D @types/mocha npm install -D @types/chai test 文件至於 根附錄 test/ 之下，使用 *.spec.ts 格式命名
.mocharc.json
{ &amp;#34;extension&amp;#34;: [ &amp;#34;ts&amp;#34; ], &amp;#34;spec&amp;#34;: &amp;#34;test/**/*.spec.ts&amp;#34;, &amp;#34;import&amp;#34;: &amp;#34;tsx&amp;#34; } package.json
{ &amp;#34;scripts&amp;#34;: { &amp;#34;test&amp;#34;: &amp;#34;ts-mocha&amp;#34; } } simpleTest.spec.ts
describe(&amp;#39;Simple Test&amp;#39;, () =&amp;gt; { it(&amp;#39;should pass this simple test&amp;#39;, () =&amp;gt; { const x = 2; const y = 2; const sum = x + y; expect(sum).</description></item></channel></rss>