<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Node.js on 識之箱庭</title><link>https://HoshikawaRyuukou.github.io/tags/node.js/</link><description>Recent content in Node.js on 識之箱庭</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>HoshikawaRyuukou</copyright><lastBuildDate>Sun, 26 May 2024 21:11:00 +0000</lastBuildDate><atom:link href="https://HoshikawaRyuukou.github.io/tags/node.js/index.xml" rel="self" type="application/rss+xml"/><item><title>Node.js - Commands</title><link>https://HoshikawaRyuukou.github.io/posts/node.js-commands/</link><pubDate>Sun, 26 May 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/node.js-commands/</guid><description>Install 特性/用途 npm install npm ci (npm clean-install) 安裝依據 根據 package.json 和 package-lock.json 只根據 package-lock.json 安裝來源 使用本地緩存來加快安裝速度 直接從註冊表下載軟體包 是否需要 package-lock.json 否 是 是否更新 package-lock.json 是，可能會更新 否，不會更新 是否清理 node_modules 否 是 速度 較慢 (需要解析和更新 package-lock.json) 較快 一致性 可能不同次安裝結果不同 保證一致，每次安裝結果相同 使用場景 開發環境 CI/CD 環境 npm install args args 作用 -g, &amp;ndash;global 全局安裝 -D, &amp;ndash;save-dev 套件將添加到 devDependencies Package npm pack : 以 .tgz 導出 package npm outdated : 檢查目前專案中安裝的 npm 套件是否有可用的更新版本</description></item><item><title>Node.js - Note</title><link>https://HoshikawaRyuukou.github.io/posts/node.js-note/</link><pubDate>Sun, 26 May 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/node.js-note/</guid><description> IO Rimraf详细介绍 IoC InversifyJS Module 什麼是前端模組化？ Multitasking Worker Threads in Node.JS Worker Threads : Multitasking in NodeJS Node.js Worker Threads Vs. Child Processes: Which one should you use? Package manager 為什麼 pnpm 比 npm 更快且更省空間？ CLI chalk cli-table3 Tools npm trends Vite Vite 是什麼? 為什麼要用 Vite? 它解決了哪些問題? 又是如何解決?</description></item><item><title>Node.js - Unit Test ( TypeScript + Mocha + Chai )</title><link>https://HoshikawaRyuukou.github.io/posts/node.js-unit-test-typescript-+-mocha-+-chai/</link><pubDate>Wed, 03 Apr 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/node.js-unit-test-typescript-+-mocha-+-chai/</guid><description>Guide Setup a new TypeScript project with Mocha support 如何在 TypeScript + ESM + Mocha + tsconfig-paths 下运行 Mocha 测试用例 Chai Configure npm install -D typescript mocha ts-mocha chai npm install -D @types/node npm install -D @types/mocha npm install -D @types/chai test 文件至於 根附錄 test/ 之下，使用 *.spec.ts 格式命名
.mocharc.json
{ &amp;#34;extension&amp;#34;: [ &amp;#34;ts&amp;#34; ], &amp;#34;spec&amp;#34;: &amp;#34;test/**/*.spec.ts&amp;#34;, &amp;#34;import&amp;#34;: &amp;#34;tsx&amp;#34; } package.json
{ &amp;#34;scripts&amp;#34;: { &amp;#34;test&amp;#34;: &amp;#34;ts-mocha&amp;#34; } } simpleTest.spec.ts
describe(&amp;#39;Simple Test&amp;#39;, () =&amp;gt; { it(&amp;#39;should pass this simple test&amp;#39;, () =&amp;gt; { const x = 2; const y = 2; const sum = x + y; expect(sum).</description></item><item><title>Node.js - Configure</title><link>https://HoshikawaRyuukou.github.io/posts/node.js-configure/</link><pubDate>Wed, 13 Mar 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/node.js-configure/</guid><description>Guide Node.js究竟是什么？初学者指南 Setup Node.js Projects with TypeScript, ESLint and Prettier [指令] npm cli &amp;amp; package.json Multiple exports with types in a Typescript Package Environment coreybutler/nvm-windows nvm-windows 管理 Windows Node.js 版本 解决Node.js的命令行输出中文乱码问题（也适用于Electron） tsx: 替代 node 指令、支持运行 TypeScript &amp;amp; ESM 的 CLI 程序 Config @tsconfig/node20 : Node 20 推薦 tsconfig.json Project Configure npm install -g typescript npm install -g tsx npm init -y npm install -D typescript npm install -D tsx npm install -D @types/node npm install -D @tsconfig/node20 tsc --init ESLint Understanding ESLint Configuration: .</description></item></channel></rss>