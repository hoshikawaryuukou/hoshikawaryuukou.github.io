<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Career on 識之箱庭</title><link>https://HoshikawaRyuukou.github.io/tags/career/</link><description>Recent content in Career on 識之箱庭</description><generator>Hugo</generator><language>zh-tw</language><copyright>HoshikawaRyuukou</copyright><lastBuildDate>Wed, 24 Sep 2025 20:31:00 +0800</lastBuildDate><atom:link href="https://HoshikawaRyuukou.github.io/tags/career/index.xml" rel="self" type="application/rss+xml"/><item><title>Chat - Career - Work Milestones</title><link>https://HoshikawaRyuukou.github.io/posts/chat---career---work-milestones/</link><pubDate>Wed, 24 Sep 2025 20:31:00 +0800</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/chat---career---work-milestones/</guid><description>&lt;h2 id="quick-chat"&gt;Quick Chat&lt;/h2&gt;
&lt;h3 id="第一站朱o數位科技-unity-數位內容開發"&gt;&lt;strong&gt;第一站：朱O數位科技 (Unity 數位內容開發)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;我的第一份正職工作，是大學產學合作的延伸。對於剛畢業的我來說，薪資條件相當不錯，當時的想法很單純，就是希望能邊做邊學，持續精進技術。&lt;/p&gt;
&lt;p&gt;主要的工作內容是開發 Unity 數位教材和 VR 應用。然而，經過一年的實踐，我開始感覺到一絲不安。團隊的開發模式比較接近大學時期的專案，缺乏業界標準化的流程。加上我是公司唯一的 Unity 開發者，雖然獨立完成了許多專案，卻也少了程式碼審查 (Code Review) 和技術交流的機會，讓我擔心自己會逐漸與業界主流脫節。&lt;/p&gt;
&lt;p&gt;在某次合作案中，我深刻體會到，一個專案若缺乏專業的企劃或產品經理 (PM)，會對產品方向和開發效率造成多大的衝擊。這段經歷讓我第一次意識到，軟體開發不僅僅是寫程式而已。&lt;/p&gt;
&lt;p&gt;不久後，公司業務受到中國「雙減政策」的影響，我也在這波變動中，以半資遣、半主動的方式離開，踏上了尋找下一站的旅程。&lt;/p&gt;
&lt;h3 id="轉職沉澱期系統化地重塑技術根基"&gt;&lt;strong&gt;轉職沉澱期：系統化地重塑技術根基&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;離開第一份工作後，我沒有急著投入下一間公司，而是決定給自己一段時間，系統性地打好技術基礎。&lt;/p&gt;
&lt;p&gt;為什麼不直接在工作中學習呢？我詢問了身邊的朋友，發現許多公司的開發環境，更要求你快速融入既有的工作流，反而學習新技術的機會相對有限。這給我一種「你可能會成為資深員工，卻不一定是資深工程師」的感覺。&lt;/p&gt;
&lt;p&gt;因此，我開始有計劃地深入學習 Design Pattern、軟體架構 (Architecture)，並大量閱讀國外開發者的經驗分享。我不是空想，而是將這些理論在 Unity 中反覆實踐、驗證，逐步建立起屬於自己的設計思維體系。這段時期的每一次練習，都成為了我日後解決問題的基石。&lt;/p&gt;
&lt;h3 id="第二站青o遊戲-遊戲客戶端開發"&gt;&lt;strong&gt;第二站：青O遊戲 (遊戲客戶端開發)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在面試時，老闆提及他曾是工程師出身，並且非常認同我的設計理念。這讓我燃起了熱情，希望能到第一線的開發戰場，實際驗證我所學的知識，並深入了解如何與美術、企劃、PM 等不同角色進行高效的協同開發。&lt;/p&gt;
&lt;p&gt;進入公司後，我觀察到核心團隊成員大多是跟隨老闆從學校時期一路打拼至今的夥伴，這使得公司的技術棧相對傳統。我所參與的客戶端專案，不僅累積了大量的技術債，架構也比較混亂。在無法進行大規模重構的前提下，我的首要任務是為專案「續命」，成功導入了熱更新機制和資源管理系統，以維持產品的穩定運作。&lt;/p&gt;
&lt;p&gt;此外，公司也賦予我「為團隊注入技術新血」的任務，我開始負責新技術的研究與分享，希望能帶動團隊的技術氛圍。然而，當時公司正處於現金流不穩的階段，我時常需要支援不同單位的緊急任務，導致工作體驗變得相當破碎。&lt;/p&gt;
&lt;p&gt;我曾提出一些關於改善開發流程的建議，雖然得到了認同，但受限於資源，最終無力執行。技術單位的角色，逐漸淪為專案需求的附庸。在這次經歷後，我意識到，一個體制完善、流程清晰的工作環境，對於工程師的長期發展至關重要，也因此萌生了尋找更成熟團隊的想法。&lt;/p&gt;</description></item><item><title>Chat - Career - Mindset</title><link>https://HoshikawaRyuukou.github.io/posts/chat---career---mindset/</link><pubDate>Thu, 24 Jul 2025 20:31:00 +0800</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/chat---career---mindset/</guid><description>&lt;h2 id="quick-chat"&gt;Quick Chat&lt;/h2&gt;
&lt;p&gt;這是我近年於職場上的心態轉變，也算是告別曾經的那份天真👀。&lt;/p&gt;
&lt;h2 id="不再自我感動職場沒有默契只有溝通"&gt;&lt;strong&gt;不再自我感動：職場沒有默契，只有溝通&lt;/strong&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;以前常會想：「我都做到這樣了，應該會被看見吧？」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但現實往往是——大家都在忙，沒人會有空觀察你、理解你努力背後的細節。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有額外做，就清楚地說。這不是邀功，是讓資訊透明、讓決策更有依據。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="不再腦補結論有問題就問不猜測別人怎麼想"&gt;&lt;strong&gt;不再腦補結論：有問題就問，不猜測別人怎麼想&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;很多時候一句主管的語氣、一個同事的反應，可能讓人開始內心小劇場：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「是不是我表現不好？他是不是在暗示我？」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但其實根本沒這麼複雜，有問題就說、想知道就問。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不確定的事先標註是猜測，別拿來當決策依據。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="不再只看自己的工具箱用對資源比技術更重要"&gt;&lt;strong&gt;不再只看自己的工具箱：用對資源比技術更重要&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;這是最近一個明顯體悟。某次 server 誤刪資料，技術面很難復原，大家都在討論備份或 rollback 的可能性。但以營運部門的觀點：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其實有個方式可以救到 70% 關鍵資料，而且成本很低。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因為他們知道哪些資料「真有價值」。技術不該只解「怎麼做」，更該問「為什麼做、為什麼這樣做比較值得」。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;不要急著找最強的技術解，要先找到對的人問對的問題。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description></item><item><title>Chat - Career - Software Engineer</title><link>https://HoshikawaRyuukou.github.io/posts/chat---career---software-engineer/</link><pubDate>Thu, 30 May 2024 10:00:00 +0800</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/chat---career---software-engineer/</guid><description>&lt;h2 id="quick-chat"&gt;Quick Chat&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;後端：深入且穩定&lt;/li&gt;
&lt;li&gt;前端：廣泛且彈性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="roadmap"&gt;Roadmap&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://roadmap.sh/"&gt;Developer Roadmaps - roadmap.sh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="algorithm"&gt;Algorithm&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/labuladong/fucking-algorithm?tab=readme-ov-file"&gt;fucking-algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/krahets/hello-algo"&gt;hello-algo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TheAlgorithms"&gt;The Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item></channel></rss>