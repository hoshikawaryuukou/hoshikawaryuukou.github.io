<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JavaScript on 識之箱庭</title><link>https://HoshikawaRyuukou.github.io/tags/javascript/</link><description>Recent content in JavaScript on 識之箱庭</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>HoshikawaRyuukou</copyright><lastBuildDate>Tue, 22 Oct 2024 21:11:00 +0000</lastBuildDate><atom:link href="https://HoshikawaRyuukou.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>Javascript_TypeScript - Package - rimraf</title><link>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-package-rimraf/</link><pubDate>Tue, 22 Oct 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-package-rimraf/</guid><description>Quick Chat rimraf 是一個用於遞迴刪除文件或目錄的 Node.js 庫，類似於 Unix 上的 rm -rf 命令。它的主要功能是跨平台刪除文件和文件夾，特別適合在 Windows 和 Unix 系統上使用。
Guide isaacs/rimraf Rimraf详细介绍 Install pnpm add -D rimraf Usage 單個文件 pnpm rimraf file.txt 單個目錄 pnpm rimraf folder 複數目標 pnpm rimraf folder1 folder2 file.txt 匹配目標 pnpm rimraf --glob &amp;#34;./**/index.js&amp;#34; 透過 scripts command 執行 { &amp;#34;scripts&amp;#34;: { &amp;#34;clean&amp;#34;: &amp;#34;rimraf dist&amp;#34; } }</description></item><item><title>Javascript_TypeScript - Package - workerpool</title><link>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-package-workerpool/</link><pubDate>Tue, 22 Oct 2024 08:12:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-package-workerpool/</guid><description>Quick Chat 整合 Web Workers 與 worker_threads，因此支援瀏覽器和 Node.js。 API 設計直觀(管理工作線程、訊息傳遞和錯誤處理)。 實現 worker pool 管理功能。 支援 Promise 與 async/await。 Guide workerpool Vite Workerpool Example Other Nest.js - Worker threads 잘 사용해보기 NestJS Dependency Injection in Worker Threads https://github.com/vitest-dev/vitest/issues/5757#issuecomment-2146013141 https://github.com/nodejs/node/issues/47747</description></item><item><title>Javascript_TypeScript - Package - lint-staged</title><link>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-package-lint-staged/</link><pubDate>Fri, 18 Oct 2024 08:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-package-lint-staged/</guid><description>Quick Chat lint-staged 可以只對 git staged 的檔案執行 lint 處理，進而提升檢查效率。
Guide lint-staged Notice ⚠️ 這裡與 simple-git-hooks 搭配使用 ⚠️ 跟 Prettier 搭配使用，必須確保 ESLint 在 Prettier 前面先執行 Install pnpm add -D lint-staged Usage 添加命令至 package.json { &amp;#34;lint-staged&amp;#34;: { &amp;#34;*.{ts,js}&amp;#34;: [ &amp;#34;eslint&amp;#34; ] } } 執行 pnpm lint-staged Sample { &amp;#34;lint-staged&amp;#34;: { &amp;#34;*.{js,json}&amp;#34;: [ &amp;#34;prettier --write&amp;#34; ], &amp;#34;*.ts?(x)&amp;#34;: [ &amp;#34;eslint --fix&amp;#34;, &amp;#34;prettier --parser=typescript --write&amp;#34; ] } }</description></item><item><title>Javascript_TypeScript - Package - ESLint</title><link>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-package-eslint/</link><pubDate>Thu, 17 Oct 2024 22:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-package-eslint/</guid><description>Quick Chat ESLint 是一個用來檢查和修復 JavaScript/TypeScript 程式碼風格和潛在錯誤的工具，幫助維持一致性和提高程式碼品質。它可以根據自訂規則或預設的最佳實踐規則來進行靜態分析。
⚠️ ESLint 正逐步廢除格式化規則 - Deprecation of formatting rules。 ⚠️ 官方建議使用 Prettier 作為格式化方案。 Guide ESLint - Pluggable JavaScript Linter Using the New ESLint Flat Config 仕組みと嬉しさから理解するeslint FlatConfig対応 Install pnpm create @eslint/config@latest Extension vscode 擴充功能 Extra - ESLint Config Inspector pnpx @eslint/config-inspector Config eslint.config.js - 使用純 JavaScript 編寫配置，以便支持更好的導入導出。 使用一個純陣列來定義所有的規則和配置，避免了多層嵌套的問題。 後面出現的配置會覆蓋前面的配置。 Sample .vscode/extension.json { &amp;#34;recommendations&amp;#34;: [&amp;#34;dbaeumer.vscode-eslint&amp;#34;] } eslint.config.js import pluginJs from &amp;#39;@eslint/js&amp;#39;; import tseslint from &amp;#39;typescript-eslint&amp;#39;; export default [ { name: &amp;#39;all&amp;#39;, files: [&amp;#39;**/*.</description></item><item><title>Javascript_TypeScript - Package - simple-git-hooks</title><link>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-package-simple-git-hooks/</link><pubDate>Tue, 15 Oct 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-package-simple-git-hooks/</guid><description>Guide simple-git-hooks Install pnpm add -D simple-git-hooks Notice ⚠️ 更改命令後記得更新 git hook ⚠️ 不要添加 &amp;quot;postinstall&amp;quot;: &amp;quot;pnpx simple-git-hooks&amp;quot; 於 package.json，會影響 publish 行為 ⚠️ 個人不建議簡化 跳過 hook 行為，必須保持操作不適度 Usage 添加命令至 package.json githooks { &amp;#34;simple-git-hooks&amp;#34;: { &amp;#34;pre-commit&amp;#34;: &amp;#34;echo &amp;#39;before commit&amp;#39;&amp;#34; } } 更新 git hook pnpx simple-git-hooks 跳過 git hook - CI 這部分代補，目前沒有操作情境 doc 跳過 git hook - 三方 git client 開啟 git bash - git commit -m &amp;#34;你的 commit 訊息&amp;#34; --no-verify Sample { &amp;#34;simple-git-hooks&amp;#34;: { &amp;#34;pre-commit&amp;#34;: &amp;#34;pnpm lint-staged &amp;amp;&amp;amp; pnpm check&amp;#34;, &amp;#34;commit-msg&amp;#34;: &amp;#34;node scripts/verify-commit.</description></item><item><title>Javascript_TypeScript - Package - tsup</title><link>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-package-tsup/</link><pubDate>Sun, 13 Oct 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-package-tsup/</guid><description>Quick Chat The simplest and fastest way to bundle your TypeScript libraries.
設計的初衷是讓開發者能夠以最少的設定完成打包工作，內建許多合理的預設值。
Guide tsup 为什么是 tsup Dual Publishing ESM and CJS Modules with tsup and Are the Types Wrong? Sample - only esm module tsup.config.ts import { defineConfig } from &amp;#39;tsup&amp;#39;; export default defineConfig({ // 指定入口文件 entry: [&amp;#39;src/index.ts&amp;#39;, &amp;#39;src/subpath/index.ts&amp;#39;, &amp;#39;src/internal/index.ts&amp;#39;], // ESM 格式 format: [&amp;#39;esm&amp;#39;], // 生成類型定義 dts: true, // 每次構建時清理輸出目錄 clean: true, });</description></item><item><title>Javascript_TypeScript - TypeScript - tsconfig.json</title><link>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-typescript-tsconfig.json/</link><pubDate>Sat, 12 Oct 2024 08:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-typescript-tsconfig.json/</guid><description>Quick Chat 當目錄中出現了 tsconfig.json 文件，則表示該目錄是 TypeScript 專案的根目錄。tsconfig.json 檔案指定了編譯專案所需的根目錄下的檔案以及編譯選項。實務上在不同的開發情境中，準備不同的 tsconfig.json 是非常有必要的。
開發環境中，可能希望啟用更多的錯誤檢查和調試資訊，以便更快地發現問題。 生產環境中，則可能希望關閉這些額外的檢查，以提升編譯速度並減少輸出檔案大小。 呼叫 tsc 時使用 --project 或 -p 選項來指定相應的配置檔案。
tsc -p tsconfig.build.json Guide tsconfig.json 是什麼 TSConfig Reference tsc性能优化 &amp;ndash; Project References 基底 tsconfig Node 20 推薦的 tsconfig.json
@tsconfig/node20 npm install -D @tsconfig/node20 可以繼承基底 tsconfig 並覆寫參數
{ &amp;#34;extends&amp;#34;: &amp;#34;@tsconfig/node20/tsconfig.json&amp;#34;, &amp;#34;compilerOptions&amp;#34;: { &amp;#34;preserveConstEnums&amp;#34;: true }, &amp;#34;include&amp;#34;: [&amp;#34;src/**/*&amp;#34;], &amp;#34;exclude&amp;#34;: [&amp;#34;node_modules&amp;#34;, &amp;#34;**/*.spec.ts&amp;#34;] } 型別導出 { &amp;#34;compilerOptions&amp;#34;: { &amp;#34;declaration&amp;#34;: true, &amp;#34;declarationMap&amp;#34;: true, &amp;#34;emitDeclarationOnly&amp;#34;: true, &amp;#34;outDir&amp;#34;: &amp;#34;.</description></item><item><title>Javascript_TypeScript - Package - Prettier</title><link>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-package-prettier/</link><pubDate>Thu, 05 Sep 2024 08:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-package-prettier/</guid><description>Quick Chat Prettier 是一個代碼格式化工具，用於保持代碼風格一致。
Guide Prettier · Opinionated Code Formatter playground 如何配置 prettier Install pnpm add -D prettier Extension vscode 擴充功能 Config .prettierrc : Configuration File · Prettier .prettierignore : Ignoring Code · Prettier Plugin prettier-plugin-organize-imports : 排序/合併/移除未使用的 import 聲明 Issue 跨平台協同的結尾符問題 [eslint] Delete CR eslint(prettier/prettier) issue 令人困擾的git autocrlf – Opass Life Integration - ESlint eslint-config-prettier ESLint 配置，用於關閉與 Prettier 產生衝突。 eslint-config-prettier - eslint.config.js (flat config) Sample .vscode/extension.json { &amp;#34;recommendations&amp;#34;: [&amp;#34;esbenp.prettier-vscode&amp;#34;] } .</description></item><item><title>Javascript_TypeScript - Package - commitlint</title><link>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-package-commitlint/</link><pubDate>Fri, 12 Jul 2024 08:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-package-commitlint/</guid><description>Quick Chat commitlint 是一個用來檢查 git commit 信息格式的工具，它可以配合多種規範使用。
Guide commitlint commitlint doc Commit-lint学习：新手入门指南 Commitlint vs Commitizen: Comparison for Better Git Commit Practices Install pnpm add -D @commitlint/{cli,config-conventional} Sample commitlint.config.js export default { extends: [&amp;#39;@commitlint/config-conventional&amp;#39;], }; package.json { &amp;#34;simple-git-hooks&amp;#34;: { &amp;#34;pre-commit&amp;#34;: &amp;#34;pnpm lint-staged &amp;amp;&amp;amp; pnpm check&amp;#34;, &amp;#34;commit-msg&amp;#34;: &amp;#34;pnpx commitlint --edit $1&amp;#34; }, }</description></item><item><title>Javascript_TypeScript - Package - Vitest</title><link>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-package-vitest/</link><pubDate>Tue, 02 Jul 2024 08:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-package-vitest/</guid><description>Guide Vitest Coverage 這些數值表示了測試覆蓋率的不同方面，具體如下：
% Stmts (Statements Coverage)：
說明：表示程式碼中所有執行語句的覆蓋率。這個百分比告訴你測試運行時執行了多少語句。 例如：如果程式碼中有 100 行執行語句，而測試覆蓋了其中的 80 行，則此覆蓋率為 80%。 % Branch (Branches Coverage)：
說明：表示條件分支的覆蓋率（如 if/else、switch/case）。這個百分比告訴你程式碼中所有可能的邏輯分支是否被測試覆蓋。 例如：如果有 10 個 if/else 條件，但只有 7 個條件分支在測試中執行過，則此覆蓋率為 70%。 % Funcs (Functions Coverage)：
說明：表示函數的覆蓋率。這個百分比告訴你測試運行時，程式碼中定義的函數中有多少被調用和覆蓋。 例如：如果程式碼中有 20 個函數，而測試覆蓋了其中的 15 個，則此覆蓋率為 75%。 % Lines (Lines Coverage)：
說明：表示實際被執行的行數覆蓋率。這與 % Stmts 類似，但更精確地計算了具體的行數。 例如：如果程式碼中有 200 行代碼，而測試覆蓋了其中的 180 行，則此覆蓋率為 90%。 Uncovered Line #s：
說明：列出未被測試覆蓋的具體行號。這些是測試未執行到的程式碼行，你可以根據這些行號來調整和增加測試用例，從而提高測試覆蓋率。 這些指標有助於你了解測試覆蓋率的具體情況，並確保你的程式碼在不同方面都得到充分的測試。
Extra 必要時使用括 弧表示法 訪問屬性private expect(inst[&amp;#34;_somePrivateProp&amp;#34;]).toBe(&amp;#34;foo&amp;#34;); // OK</description></item><item><title>Javascript_TypeScript - Javascript Note</title><link>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-javascript-note/</link><pubDate>Mon, 29 Apr 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-javascript-note/</guid><description>Style Google JavaScript Style Guide Basic 作用域(scope)解說：let, const, var有什麼差？ Value與Reference的差異解說 async/await JavaScript 中的 async/await 是什麼？和 promise 有什麼差別？ Event Loop JavaScript Event Loop解說：單執行緒還能異步運算？ 請說明瀏覽器中的事件循環 (Event Loop) Object 為什麼推薦用 structureClone 在 JavaScript 做深拷貝? Promise Promise 是什麼？有什麼用途？ Others 前端 JavaScript 代码保护？！</description></item><item><title>Javascript_TypeScript - TypeScript Note</title><link>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-typescript-note/</link><pubDate>Mon, 29 Apr 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-typescript-note/</guid><description>Style Google TypeScript Style Guide Tool JSON to TypeScript Basic TypeScript 物件中的 public, private, protected, static, readonly TypeScript – Using Disposable Coding guidelines 使用 undefined。不要使用 null。 tsc &amp;ndash;project tsconfig.json : 使用當前目錄下的 tsconfig.json &amp;ndash;showConfig : 檢視該目錄的 tsconfig.json (包含繼承的數值)</description></item></channel></rss>