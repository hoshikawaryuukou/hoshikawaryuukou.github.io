<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TypeScript on 識之箱庭</title><link>https://HoshikawaRyuukou.github.io/tags/typescript/</link><description>Recent content in TypeScript on 識之箱庭</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>HoshikawaRyuukou</copyright><lastBuildDate>Fri, 06 Sep 2024 22:11:00 +0000</lastBuildDate><atom:link href="https://HoshikawaRyuukou.github.io/tags/typescript/index.xml" rel="self" type="application/rss+xml"/><item><title>Javascript_TypeScript - Package - ESLint</title><link>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-package-eslint/</link><pubDate>Fri, 06 Sep 2024 22:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-package-eslint/</guid><description>Quick Chat ESLint 是一個用來檢查和修復 JavaScript/TypeScript 程式碼風格和潛在錯誤的工具，幫助維持一致性和提高程式碼品質。它可以根據自訂規則或預設的最佳實踐規則來進行靜態分析。
從 ESLint v8.53.0 開始，官方將逐步廢除格式化規則，並預計在 v10 完全廢除。官方在這篇文章中解釋了放棄格式化規則的原因：
Deprecation of formatting rules
⚠️ 官方建議使用 Prettier 作為格式化方案。
Guide ESLint - Pluggable JavaScript Linter [note] ESLint Nuxt + ESLint 9 + TypeScript + Prettier - Configuration Guide 2024 仕組みと嬉しさから理解するeslint FlatConfig対応 Vue3+Ts+Pnpm+eslint9.0+Prettier+Stylelint+vant（移動/h5）專案搭建記錄 Install pnpm create @eslint/config@latest VSCode 擴充功能 : ESLint Extra - ESLint Config Inspector pnpm dlx @eslint/config-inspector Extra - Prettier eslint-config-prettier ESLint 配置，用於關閉與 Prettier 產生衝突。 eslint-config-prettier - eslint.config.js (flat config) eslint.</description></item><item><title>Javascript_TypeScript - Package - Prettier</title><link>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-package-prettier/</link><pubDate>Thu, 05 Sep 2024 08:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-package-prettier/</guid><description>Quick Chat Prettier 是一個代碼格式化工具，用於保持代碼風格一致。
Guide Prettier · Opinionated Code Formatter playground 如何配置 prettier Install pnpm add -D prettier VSCode 擴充功能 : Prettier - Code formatter 啟用 Editor : Format on Save 選擇 Default Formatter 為 Prettier - Code Formatter Configure .prettierrc : Configuration File · Prettier .prettierignore : Ignoring Code · Prettier Plugins prettier-plugin-organize-imports : 排序/合併/移除未使用的 import 聲明 { &amp;#34;plugins&amp;#34;: [&amp;#34;prettier-plugin-organize-imports&amp;#34;] } Issue 當跨平台協同的時候會有結尾符的問題 [eslint] Delete CR eslint(prettier/prettier) issue 令人困擾的git autocrlf – Opass Life 於 .</description></item><item><title>TypeScript - tsconfig.json</title><link>https://HoshikawaRyuukou.github.io/posts/typescript-tsconfig.json/</link><pubDate>Thu, 01 Aug 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/typescript-tsconfig.json/</guid><description>Quick Chat 當目錄中出現了 tsconfig.json 文件，則表示該目錄是 TypeScript 專案的根目錄。tsconfig.json 檔案指定了編譯專案所需的根目錄下的檔案以及編譯選項。實務上在不同的開發情境中，準備不同的 tsconfig.json 是非常有必要的。
開發環境中，可能希望啟用更多的錯誤檢查和調試資訊，以便更快地發現問題。 生產環境中，則可能希望關閉這些額外的檢查，以提升編譯速度並減少輸出檔案大小。 呼叫 tsc 時使用 --project 或 -p 選項來指定相應的配置檔案。
tsc -p tsconfig.build.json Guide tsconfig.json 是什麼 TSConfig Reference 基底 tsconfig Node 20 推薦的 tsconfig.json
@tsconfig/node20 npm install -D @tsconfig/node20 可以繼承基底 tsconfig 並覆寫參數
{ &amp;#34;extends&amp;#34;: &amp;#34;@tsconfig/node20/tsconfig.json&amp;#34;, &amp;#34;compilerOptions&amp;#34;: { &amp;#34;preserveConstEnums&amp;#34;: true }, &amp;#34;include&amp;#34;: [&amp;#34;src/**/*&amp;#34;], &amp;#34;exclude&amp;#34;: [&amp;#34;node_modules&amp;#34;, &amp;#34;**/*.spec.ts&amp;#34;] } Monorepo 相關參數 { &amp;#34;compilerOptions&amp;#34;: { &amp;#34;incremental&amp;#34;: true, &amp;#34;composite&amp;#34;: true } } incremental 用於加速 TypeScript 的編譯過程，特別是當代碼庫很大或涉及多個子項目時。</description></item><item><title>Javascript_TypeScript - Package - Commitlint &amp; Commitizen</title><link>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-package-commitlint-commitizen/</link><pubDate>Fri, 12 Jul 2024 08:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-package-commitlint-commitizen/</guid><description>Quick Chat Commitlint 是一個用來檢查 git commit 信息格式的工具，它可以配合多種規範使用。
Commitizen 則是一個幫助你格式化 git commit 信息的工具，依照預設的格式進行規範。
Guide commitlint commitlint doc cz-cli 對於 Windows 使用者：確保所有 husky 檔案均已UTF-8編碼。如果使用任何其他格式，則可能會在執行時拋出錯誤，例如無法執行二進位檔案。
Install Commitlint npm install --save-dev @commitlint/{cli,config-conventional} Configuration - commitlint.config.js export default { extends: [&amp;#39;@commitlint/config-conventional&amp;#39;] }; Configuration - .husky/commit-msg npx --no-install commitlint --edit $1 Install Commitizen npm install -g commitizen commitizen init cz-conventional-changelog --save-dev --save-exact Run Commitizen git cz</description></item><item><title>Javascript_TypeScript - Package - Lint-staged</title><link>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-package-lint-staged/</link><pubDate>Thu, 11 Jul 2024 08:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-package-lint-staged/</guid><description>Quick Chat lint-staged 可以只對 git staged 的檔案執行 lint 檢查，進而提升檢查效率。
Guide lint-staged 值得注意的是跟 Prettier 搭配使用，必須確保 ESLint 在 Prettier 前面先執行。
Install npm install --save-dev lint-staged Configuration - package.json { &amp;#34;scripts&amp;#34;: { ... }, &amp;#34;lint-staged&amp;#34;: { &amp;#34;*.{ts,js}&amp;#34;: [ &amp;#34;eslint&amp;#34; ] } } Configuration - .husky/pre-commit npx lint-staged</description></item><item><title>Javascript_TypeScript - Package - Husky</title><link>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-package-husky/</link><pubDate>Fri, 05 Jul 2024 08:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-package-husky/</guid><description>Quick Chat Husky 是一個用來在 Git 針對特定事件觸發自動執行腳本的工具，它的主要用途是確保在開發過程中執行特定的檢查或操作，例如代碼格式化、Lint 檢查、測試執行等。這些操作通常在開發人員 commit 或 push 代碼之前執行，從而提高代碼質量並避免不合規代碼進入代碼庫。
Guide Husky Doc 每周轮子之 husky：统一规范团队 Git Hooks Install npm install --save-dev husky Configuration - 初始化 npx husky init 會在 .husky/ 中創建 pre-commit 腳本 更新 package.json 中的 prepare 腳本</description></item><item><title>Javascript_TypeScript - Javascript Note</title><link>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-javascript-note/</link><pubDate>Mon, 29 Apr 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-javascript-note/</guid><description>Style Google JavaScript Style Guide Basic 作用域(scope)解說：let, const, var有什麼差？ Value與Reference的差異解說 async/await JavaScript 中的 async/await 是什麼？和 promise 有什麼差別？ Event Loop JavaScript Event Loop解說：單執行緒還能異步運算？ 請說明瀏覽器中的事件循環 (Event Loop) Object 為什麼推薦用 structureClone 在 JavaScript 做深拷貝? Promise Promise 是什麼？有什麼用途？ Others 前端 JavaScript 代码保护？！</description></item><item><title>Javascript_TypeScript - TypeScript Note</title><link>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-typescript-note/</link><pubDate>Mon, 29 Apr 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/javascript_typescript-typescript-note/</guid><description>Style Google TypeScript Style Guide Tool JSON to TypeScript Basic TypeScript 物件中的 public, private, protected, static, readonly TypeScript – Using Disposable tsc &amp;ndash;project tsconfig.json : 使用當前目錄下的 tsconfig.json &amp;ndash;showConfig : 檢視該目錄的 tsconfig.json (包含繼承的數值)</description></item></channel></rss>