<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TypeScript on 識之箱庭</title><link>https://HoshikawaRyuukou.github.io/tags/typescript/</link><description>Recent content in TypeScript on 識之箱庭</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>HoshikawaRyuukou</copyright><lastBuildDate>Thu, 01 Aug 2024 21:11:00 +0000</lastBuildDate><atom:link href="https://HoshikawaRyuukou.github.io/tags/typescript/index.xml" rel="self" type="application/rss+xml"/><item><title>TypeScript - tsconfig.json</title><link>https://HoshikawaRyuukou.github.io/posts/typescript-tsconfig.json/</link><pubDate>Thu, 01 Aug 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/typescript-tsconfig.json/</guid><description>Quick Chat 當目錄中出現了 tsconfig.json 文件，則表示該目錄是 TypeScript 專案的根目錄。tsconfig.json 檔案指定了編譯專案所需的根目錄下的檔案以及編譯選項。實務上在不同的開發情境中，準備不同的 tsconfig.json 是非常有必要的。
開發環境中，可能希望啟用更多的錯誤檢查和調試資訊，以便更快地發現問題。 生產環境中，則可能希望關閉這些額外的檢查，以提升編譯速度並減少輸出檔案大小。 呼叫 tsc 時使用 --project 或 -p 選項來指定相應的配置檔案。
tsc -p tsconfig.build.json Guide tsconfig.json 是什麼 TSConfig Reference 基底 tsconfig Node 20 推薦的 tsconfig.json
@tsconfig/node20 npm install -D @tsconfig/node20 可以繼承基底 tsconfig 並覆寫參數
{ &amp;#34;extends&amp;#34;: &amp;#34;@tsconfig/node20/tsconfig.json&amp;#34;, &amp;#34;compilerOptions&amp;#34;: { &amp;#34;preserveConstEnums&amp;#34;: true }, &amp;#34;include&amp;#34;: [&amp;#34;src/**/*&amp;#34;], &amp;#34;exclude&amp;#34;: [&amp;#34;node_modules&amp;#34;, &amp;#34;**/*.spec.ts&amp;#34;] }</description></item><item><title>Node.js - Packages</title><link>https://HoshikawaRyuukou.github.io/posts/node.js-packages/</link><pubDate>Sat, 22 Jun 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/node.js-packages/</guid><description>Package npm trends npx npx 常用於執行一次性操做，允許你在不安裝包到全局或本地的情況下直接運行該包中的可執行文件。且會檢查並執行最新版本的包，確保你不會因為本地包過時而遇到問題。
CLI chalk cli-table3 tsx: 替代 node 指令、支持运行 TypeScript &amp;amp; ESM 的 CLI 程序 IO rimraf Rimraf详细介绍 IoC InversifyJS Multitasking workerpool Test Vitest</description></item><item><title>TypeScript - Note</title><link>https://HoshikawaRyuukou.github.io/posts/typescript-note/</link><pubDate>Mon, 29 Apr 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/typescript-note/</guid><description>Style Google TypeScript Style Guide Tool JSON to TypeScript Basic TypeScript 物件中的 public, private, protected, static, readonly</description></item><item><title>Node.js - Unit Test ( TypeScript + Mocha + Chai )</title><link>https://HoshikawaRyuukou.github.io/posts/node.js-unit-test-typescript-+-mocha-+-chai/</link><pubDate>Wed, 03 Apr 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/node.js-unit-test-typescript-+-mocha-+-chai/</guid><description>Guide Setup a new TypeScript project with Mocha support 如何在 TypeScript + ESM + Mocha + tsconfig-paths 下运行 Mocha 测试用例 Chai Configure npm install -D typescript mocha ts-mocha chai npm install -D @types/node npm install -D @types/mocha npm install -D @types/chai test 文件至於 根附錄 test/ 之下，使用 *.spec.ts 格式命名
.mocharc.json
{ &amp;#34;extension&amp;#34;: [ &amp;#34;ts&amp;#34; ], &amp;#34;spec&amp;#34;: &amp;#34;test/**/*.spec.ts&amp;#34;, &amp;#34;import&amp;#34;: &amp;#34;tsx&amp;#34; } package.json
{ &amp;#34;scripts&amp;#34;: { &amp;#34;test&amp;#34;: &amp;#34;ts-mocha&amp;#34; } } simpleTest.spec.ts
describe(&amp;#39;Simple Test&amp;#39;, () =&amp;gt; { it(&amp;#39;should pass this simple test&amp;#39;, () =&amp;gt; { const x = 2; const y = 2; const sum = x + y; expect(sum).</description></item></channel></rss>