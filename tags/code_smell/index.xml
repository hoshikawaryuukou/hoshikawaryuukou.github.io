<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Code_Smell on 識之箱庭</title><link>https://HoshikawaRyuukou.github.io/tags/code_smell/</link><description>Recent content in Code_Smell on 識之箱庭</description><generator>Hugo</generator><language>zh-tw</language><copyright>HoshikawaRyuukou</copyright><lastBuildDate>Fri, 18 Jul 2025 16:56:18 +0800</lastBuildDate><atom:link href="https://HoshikawaRyuukou.github.io/tags/code_smell/index.xml" rel="self" type="application/rss+xml"/><item><title>Software Design - Code Smell</title><link>https://HoshikawaRyuukou.github.io/posts/software-design---code-smell/</link><pubDate>Fri, 18 Jul 2025 16:56:18 +0800</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/software-design---code-smell/</guid><description>&lt;h2 id="quick-chat"&gt;Quick Chat&lt;/h2&gt;
&lt;p&gt;「Code Smells（程式碼異味）」是一個軟體工程的術語，指的是程式碼中潛在問題的「警訊」。雖然這些寫法不一定會直接造成錯誤，但它們通常代表設計不良、可讀性差、難以維護或擴充的風險。&lt;/p&gt;
&lt;p&gt;⚠️ 不過在實務上&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**Code Smells 重要，但是否需要處理，要考量 &lt;strong&gt;專案體量、維護週期、團隊規模&lt;/strong&gt; 等因素。&lt;/li&gt;
&lt;li&gt;小專案或短期原型，可以容忍一些 Code Smells；而長期、大型專案，則需要更嚴謹地處理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="guide"&gt;Guide&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://refactoring.guru/refactoring/smells"&gt;Code Smells&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://luzkan.github.io/smells/"&gt;Code Smells Catalog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Software Design - Code Smell - Side Effect</title><link>https://HoshikawaRyuukou.github.io/posts/software-design---code-smell---side-effect/</link><pubDate>Fri, 18 Jul 2025 16:56:18 +0800</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/software-design---code-smell---side-effect/</guid><description>&lt;h2 id="quick-chat"&gt;Quick Chat&lt;/h2&gt;
&lt;p&gt;副作用（Side Effect）指的是一段程式在執行後，&lt;strong&gt;除了回傳值之外還影響了外部狀態&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在錯誤的位置或缺乏揭露的情況下使用副作用，會造成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函式不可預測&lt;/li&gt;
&lt;li&gt;測試困難&lt;/li&gt;
&lt;li&gt;程式閱讀成本上升&lt;/li&gt;
&lt;li&gt;Bug 躲藏不易察覺&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bad-examples"&gt;Bad Examples&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-js" data-lang="js"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a8c8"&gt;function&lt;/span&gt; &lt;span style="color:#75af00"&gt;getUserName&lt;/span&gt;&lt;span style="color:#111"&gt;(&lt;/span&gt;&lt;span style="color:#75af00"&gt;user&lt;/span&gt;&lt;span style="color:#111"&gt;)&lt;/span&gt; &lt;span style="color:#111"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75af00"&gt;saveLog&lt;/span&gt;&lt;span style="color:#111"&gt;(&lt;/span&gt;&lt;span style="color:#75af00"&gt;user&lt;/span&gt;&lt;span style="color:#111"&gt;);&lt;/span&gt; &lt;span style="color:#75715e"&gt;// 副作用：寫入外部 log
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#75af00"&gt;notifyOthers&lt;/span&gt;&lt;span style="color:#111"&gt;(&lt;/span&gt;&lt;span style="color:#75af00"&gt;user&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#75af00"&gt;name&lt;/span&gt;&lt;span style="color:#111"&gt;);&lt;/span&gt; &lt;span style="color:#75715e"&gt;// 副作用：發送通知
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;return&lt;/span&gt; &lt;span style="color:#75af00"&gt;user&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#75af00"&gt;name&lt;/span&gt;&lt;span style="color:#111"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#111"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="extras"&gt;Extras&lt;/h2&gt;
&lt;p&gt;很多時候副作用可能是無法規避的，因此重點不在「禁止副作用」，而是「把副作用設計得可控、可觀測、可預期」。&lt;/p&gt;
&lt;p&gt;較健康的副作用處理策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;明確命名：像 updateState, notifyUser, logError&lt;/li&gt;
&lt;li&gt;設計邊界：像 useEffect、controller 層 專職處理副作用&lt;/li&gt;
&lt;/ul&gt;</description></item></channel></rss>