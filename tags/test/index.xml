<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Test on 識之箱庭</title><link>https://HoshikawaRyuukou.github.io/tags/test/</link><description>Recent content in Test on 識之箱庭</description><generator>Hugo</generator><language>zh-tw</language><copyright>HoshikawaRyuukou</copyright><lastBuildDate>Sat, 03 Jun 2023 21:11:00 +0000</lastBuildDate><atom:link href="https://HoshikawaRyuukou.github.io/tags/test/index.xml" rel="self" type="application/rss+xml"/><item><title>Test - Note</title><link>https://HoshikawaRyuukou.github.io/posts/test---note/</link><pubDate>Sat, 03 Jun 2023 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/test---note/</guid><description>&lt;p>以下觀點不一定適用於各專案，請因地制宜。&lt;/p>
&lt;h2 id="在開始寫-code-之前">在開始寫 code 之前&lt;/h2>
&lt;ul>
&lt;li>測試文化: 底下的人願意寫，上面的人願意給時間。&lt;/li>
&lt;li>測試的順位: 從商業價值最高的功能開始。&lt;/li>
&lt;li>較低的測試價值
&lt;ul>
&lt;li>需求尚未明朗又必須交付成果。&lt;/li>
&lt;li>取決於經營者對價值的認定，其實跟程式沒多大關係。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>不是所有的程式都可以測試，有時候為了測試，程式需要先重構成可以測試的樣子。&lt;/li>
&lt;/ul>
&lt;h2 id="unit-test">Unit Test&lt;/h2>
&lt;h3 id="手動測試">手動測試&lt;/h3>
&lt;ul>
&lt;li>慢&lt;/li>
&lt;li>不穩定&lt;/li>
&lt;li>脆弱&lt;/li>
&lt;li>不方便&lt;/li>
&lt;/ul>
&lt;p>問題出在不可控&lt;/p>
&lt;ul>
&lt;li>希望是可控的&lt;/li>
&lt;li>可重現一樣結果&lt;/li>
&lt;/ul>
&lt;h3 id="以整體專案的角度來看單元測試">以整體專案的角度來看單元測試&lt;/h3>
&lt;p>專案內分為 不可控 與 可控 兩部分&lt;/p>
&lt;ul>
&lt;li>不可控: 檔案/資料庫/第三方套件&lt;/li>
&lt;li>可控: 除不可控以外自己所寫的部分&lt;/li>
&lt;/ul>
&lt;p>可控內分為 不可測 與 可測 兩部分&lt;/p>
&lt;ul>
&lt;li>不可測: 與不可控接觸的部分，因此會希望這部分越單純越好。&lt;/li>
&lt;li>可測: 為專案內價值較高，須小心維護的部分。&lt;/li>
&lt;/ul>
&lt;p>目標: 可測範圍盡量大，不可測盡量小。&lt;/p>
&lt;p>
 &lt;img src="https://HoshikawaRyuukou.github.io/images/UnitTest_Project_Controllability_Grading.png" alt="UnitTest_Project_Controllability_Grading">

&lt;/p>
&lt;h3 id="單元測試相較於手動測試的優勢-">單元測試相較於手動測試的優勢 ?&lt;/h3>
&lt;ul>
&lt;li>可以輕鬆的跑完多個 Test Cases&lt;/li>
&lt;/ul>
&lt;h3 id="static-要不要測-">Static 要不要測 ?&lt;/h3>
&lt;ul>
&lt;li>直接使用真實行為&lt;/li>
&lt;li>透過測試框架強測&lt;/li>
&lt;li>重構/隔離/依賴注入&lt;/li>
&lt;/ul>
&lt;h2 id="ref">Ref&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://blog.miniasp.com/post/2019/02/18/Unit-testing-Integration-testing-e2e-testing?fbclid=IwAR0oNzrUdvkS_1797MPY76s8GGf0t50XE3XAXsZcdddvUU7gHzS8ulffi5w">一次搞懂單元測試、整合測試、端對端測試之間的差異&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=8lxTP2e5Uvk">一起設計出可被單元測試的程式碼吧！&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ithelp.ithome.com.tw/articles/10102264">[Day 2]Unit Testing 簡介&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/dotnet/core/testing/unit-testing-best-practices">.NET Core 和 .NET Standard 的單元測試最佳做法&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>