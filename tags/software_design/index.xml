<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software_Design on 識之箱庭</title><link>https://HoshikawaRyuukou.github.io/tags/software_design/</link><description>Recent content in Software_Design on 識之箱庭</description><generator>Hugo</generator><language>zh-tw</language><copyright>HoshikawaRyuukou</copyright><lastBuildDate>Fri, 18 Jul 2025 16:56:18 +0800</lastBuildDate><atom:link href="https://HoshikawaRyuukou.github.io/tags/software_design/index.xml" rel="self" type="application/rss+xml"/><item><title>Software Design - Code Smell</title><link>https://HoshikawaRyuukou.github.io/posts/software-design---code-smell/</link><pubDate>Fri, 18 Jul 2025 16:56:18 +0800</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/software-design---code-smell/</guid><description>&lt;h2 id="quick-chat"&gt;Quick Chat&lt;/h2&gt;
&lt;p&gt;「Code Smells（程式碼異味）」是一個軟體工程的術語，指的是程式碼中潛在問題的「警訊」。雖然這些寫法不一定會直接造成錯誤，但它們通常代表設計不良、可讀性差、難以維護或擴充的風險。&lt;/p&gt;
&lt;p&gt;⚠️ 不過在實務上&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**Code Smells 重要，但是否需要處理，要考量 &lt;strong&gt;專案體量、維護週期、團隊規模&lt;/strong&gt; 等因素。&lt;/li&gt;
&lt;li&gt;小專案或短期原型，可以容忍一些 Code Smells；而長期、大型專案，則需要更嚴謹地處理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="guide"&gt;Guide&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://refactoring.guru/refactoring/smells"&gt;Code Smells&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://luzkan.github.io/smells/"&gt;Code Smells Catalog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Software Design - Code Smell - Side Effect</title><link>https://HoshikawaRyuukou.github.io/posts/software-design---code-smell---side-effect/</link><pubDate>Fri, 18 Jul 2025 16:56:18 +0800</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/software-design---code-smell---side-effect/</guid><description>&lt;h2 id="quick-chat"&gt;Quick Chat&lt;/h2&gt;
&lt;p&gt;副作用（Side Effect）指的是一段程式在執行後，&lt;strong&gt;除了回傳值之外還影響了外部狀態&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在錯誤的位置或缺乏揭露的情況下使用副作用，會造成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函式不可預測&lt;/li&gt;
&lt;li&gt;測試困難&lt;/li&gt;
&lt;li&gt;程式閱讀成本上升&lt;/li&gt;
&lt;li&gt;Bug 躲藏不易察覺&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bad-examples"&gt;Bad Examples&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-js" data-lang="js"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a8c8"&gt;function&lt;/span&gt; &lt;span style="color:#75af00"&gt;getUserName&lt;/span&gt;&lt;span style="color:#111"&gt;(&lt;/span&gt;&lt;span style="color:#75af00"&gt;user&lt;/span&gt;&lt;span style="color:#111"&gt;)&lt;/span&gt; &lt;span style="color:#111"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75af00"&gt;saveLog&lt;/span&gt;&lt;span style="color:#111"&gt;(&lt;/span&gt;&lt;span style="color:#75af00"&gt;user&lt;/span&gt;&lt;span style="color:#111"&gt;);&lt;/span&gt; &lt;span style="color:#75715e"&gt;// 副作用：寫入外部 log
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#75af00"&gt;notifyOthers&lt;/span&gt;&lt;span style="color:#111"&gt;(&lt;/span&gt;&lt;span style="color:#75af00"&gt;user&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#75af00"&gt;name&lt;/span&gt;&lt;span style="color:#111"&gt;);&lt;/span&gt; &lt;span style="color:#75715e"&gt;// 副作用：發送通知
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;return&lt;/span&gt; &lt;span style="color:#75af00"&gt;user&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#75af00"&gt;name&lt;/span&gt;&lt;span style="color:#111"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#111"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="extras"&gt;Extras&lt;/h2&gt;
&lt;p&gt;很多時候副作用可能是無法規避的，因此重點不在「禁止副作用」，而是「把副作用設計得可控、可觀測、可預期」。&lt;/p&gt;
&lt;p&gt;較健康的副作用處理策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;明確命名：像 updateState, notifyUser, logError&lt;/li&gt;
&lt;li&gt;設計邊界：像 useEffect、controller 層 專職處理副作用&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Software Design - Pattern - Orchestrator Pattern</title><link>https://HoshikawaRyuukou.github.io/posts/software-design---pattern---orchestrator-pattern/</link><pubDate>Fri, 18 Jul 2025 10:00:00 +0800</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/software-design---pattern---orchestrator-pattern/</guid><description>&lt;h2 id="quick-chat"&gt;Quick Chat&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;協調者模式，主要用於管理多個獨立服務或元件之間錯綜複雜的互動。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;其核心理念是在系統中引入一個專責的「協調者」（Orchestrator）或「控制器」（Controller）元件，作為整體業務流程的指揮者。&lt;/p&gt;
&lt;p&gt;協調者本身並不執行具體的業務邏輯，而是像導演一樣，負責調度各個「參與者」（Participants）或「服務」（Services）來完成任務。每個參與者專注於自己擅長的部分（例如資料查詢、驗證、計算等），執行完後將結果回傳給協調者。&lt;/p&gt;
&lt;p&gt;協調者則根據這些結果，決定後續該呼叫哪個參與者、是否中斷流程，或如何彙整輸出，以推進整體流程邏輯。如此一來，流程控制與業務邏輯得以明確分離，讓系統更具彈性與可維護性。&lt;/p&gt;
&lt;h2 id="examples"&gt;Examples&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-js" data-lang="js"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a8c8"&gt;class&lt;/span&gt; &lt;span style="color:#75af00"&gt;BaseGame&lt;/span&gt; &lt;span style="color:#111"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75af00"&gt;play&lt;/span&gt;&lt;span style="color:#111"&gt;()&lt;/span&gt; &lt;span style="color:#111"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75af00"&gt;console&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#75af00"&gt;log&lt;/span&gt;&lt;span style="color:#111"&gt;(&lt;/span&gt;&lt;span style="color:#d88200"&gt;&amp;#34;Playing base game...&amp;#34;&lt;/span&gt;&lt;span style="color:#111"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;const&lt;/span&gt; &lt;span style="color:#75af00"&gt;result&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;this&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#75af00"&gt;spin&lt;/span&gt;&lt;span style="color:#111"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;return&lt;/span&gt; &lt;span style="color:#75af00"&gt;result&lt;/span&gt;&lt;span style="color:#111"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75af00"&gt;spin&lt;/span&gt;&lt;span style="color:#111"&gt;()&lt;/span&gt; &lt;span style="color:#111"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;return&lt;/span&gt; &lt;span style="color:#111"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75af00"&gt;symbols&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#111"&gt;[&lt;/span&gt;&lt;span style="color:#d88200"&gt;&amp;#34;Free&amp;#34;&lt;/span&gt;&lt;span style="color:#111"&gt;,&lt;/span&gt; &lt;span style="color:#d88200"&gt;&amp;#34;Free&amp;#34;&lt;/span&gt;&lt;span style="color:#111"&gt;,&lt;/span&gt; &lt;span style="color:#d88200"&gt;&amp;#34;Free&amp;#34;&lt;/span&gt;&lt;span style="color:#111"&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75af00"&gt;freeSpinCount&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;&lt;span style="color:#111"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75af00"&gt;win&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;&lt;span style="color:#111"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#111"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a8c8"&gt;class&lt;/span&gt; &lt;span style="color:#75af00"&gt;FreeGame&lt;/span&gt; &lt;span style="color:#111"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75af00"&gt;play&lt;/span&gt;&lt;span style="color:#111"&gt;()&lt;/span&gt; &lt;span style="color:#111"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75af00"&gt;console&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#75af00"&gt;log&lt;/span&gt;&lt;span style="color:#111"&gt;(&lt;/span&gt;&lt;span style="color:#d88200"&gt;&amp;#34;Playing free game...&amp;#34;&lt;/span&gt;&lt;span style="color:#111"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;return&lt;/span&gt; &lt;span style="color:#111"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75af00"&gt;win&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;200&lt;/span&gt;&lt;span style="color:#111"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75af00"&gt;spins&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;&lt;span style="color:#111"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#111"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a8c8"&gt;class&lt;/span&gt; &lt;span style="color:#75af00"&gt;GameFlowController&lt;/span&gt; &lt;span style="color:#111"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75af00"&gt;constructor&lt;/span&gt;&lt;span style="color:#111"&gt;()&lt;/span&gt; &lt;span style="color:#111"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;this&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#75af00"&gt;baseGame&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;new&lt;/span&gt; &lt;span style="color:#75af00"&gt;BaseGame&lt;/span&gt;&lt;span style="color:#111"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;this&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#75af00"&gt;freeGame&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;new&lt;/span&gt; &lt;span style="color:#75af00"&gt;FreeGame&lt;/span&gt;&lt;span style="color:#111"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75af00"&gt;run&lt;/span&gt;&lt;span style="color:#111"&gt;()&lt;/span&gt; &lt;span style="color:#111"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;const&lt;/span&gt; &lt;span style="color:#75af00"&gt;baseResult&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;this&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#75af00"&gt;baseGame&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#75af00"&gt;play&lt;/span&gt;&lt;span style="color:#111"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;let&lt;/span&gt; &lt;span style="color:#75af00"&gt;finalResult&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#111"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75af00"&gt;from&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#d88200"&gt;&amp;#34;base only&amp;#34;&lt;/span&gt;&lt;span style="color:#111"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75af00"&gt;baseResult&lt;/span&gt;&lt;span style="color:#111"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;if&lt;/span&gt; &lt;span style="color:#111"&gt;(&lt;/span&gt;&lt;span style="color:#75af00"&gt;baseResult&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#75af00"&gt;freeSpinCount&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;&lt;span style="color:#111"&gt;)&lt;/span&gt; &lt;span style="color:#111"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;const&lt;/span&gt; &lt;span style="color:#75af00"&gt;freeResult&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;this&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#75af00"&gt;freeGame&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#75af00"&gt;play&lt;/span&gt;&lt;span style="color:#111"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75af00"&gt;finalResult&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#111"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75af00"&gt;from&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#d88200"&gt;&amp;#34;base + free&amp;#34;&lt;/span&gt;&lt;span style="color:#111"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75af00"&gt;baseResult&lt;/span&gt;&lt;span style="color:#111"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75af00"&gt;freeResult&lt;/span&gt;&lt;span style="color:#111"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;return&lt;/span&gt; &lt;span style="color:#75af00"&gt;finalResult&lt;/span&gt;&lt;span style="color:#111"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#111"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a8c8"&gt;const&lt;/span&gt; &lt;span style="color:#75af00"&gt;controller&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;new&lt;/span&gt; &lt;span style="color:#75af00"&gt;GameFlowController&lt;/span&gt;&lt;span style="color:#111"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a8c8"&gt;const&lt;/span&gt; &lt;span style="color:#75af00"&gt;result&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#75af00"&gt;controller&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#75af00"&gt;run&lt;/span&gt;&lt;span style="color:#111"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75af00"&gt;console&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#75af00"&gt;log&lt;/span&gt;&lt;span style="color:#111"&gt;(&lt;/span&gt;&lt;span style="color:#75af00"&gt;result&lt;/span&gt;&lt;span style="color:#111"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>Software Design - Architecture - Unity Slot Game Client</title><link>https://HoshikawaRyuukou.github.io/posts/software-design---architecture---unity-slot-game-client/</link><pubDate>Mon, 30 Jun 2025 10:00:00 +0800</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/software-design---architecture---unity-slot-game-client/</guid><description>&lt;h2 id="quick-chat"&gt;Quick Chat&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;前端開發時，「狀態管理」一直是個大哉問。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;本次的應用是 &lt;strong&gt;Slot Game&lt;/strong&gt;，這類應用強調「表現層細節」，所以對於狀態的控制不像一般資料應用一樣單純，需要處理許多細部和即時的變化。&lt;/p&gt;
&lt;h3 id="狀態管理挑戰"&gt;狀態管理挑戰&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;響應式 data-binding 限制 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若完全依賴響應式 data-binding，容易產生太多「中間態」(例如動畫進行中、結果待顯示、部分組件已經觸發&amp;hellip;等)。&lt;/li&gt;
&lt;li&gt;這樣會造成 state 爆炸、難以追蹤維護。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命令式流程控制的必要性 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;部分場景下，直接用命令式（imperative）流程更有效率。&lt;/li&gt;
&lt;li&gt;多組件聯動時的「動畫序列控制」。&lt;/li&gt;
&lt;li&gt;一連串的 user action/遊戲事件，需明確依序觸發。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-技術棧一覽"&gt;⚙️ 技術棧一覽&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;UniTask (異步)&lt;/li&gt;
&lt;li&gt;R3 (Rx，UniRx 後繼者)&lt;/li&gt;
&lt;li&gt;VContainer (依賴注入)&lt;/li&gt;
&lt;li&gt;LitMotion (Tween)&lt;/li&gt;
&lt;li&gt;YooAsset (資源管理)&lt;/li&gt;
&lt;li&gt;Newtonsoft Json (Json 解析)&lt;/li&gt;
&lt;li&gt;Alchemy (編輯器擴充)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="專案結構"&gt;專案結構&lt;/h2&gt;
&lt;h3 id="modules-主架構"&gt;Modules 主架構&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;project-root/
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;├── _Debug/ &lt;span style="color:#75715e"&gt;# 測試或實驗用模組&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;├── App/ &lt;span style="color:#75715e"&gt;# 啟動點與業務邏輯總控&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;├── GameAPI/ &lt;span style="color:#75715e"&gt;# 遊戲 API 定義&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;├── GameRunner/ &lt;span style="color:#75715e"&gt;# 遊戲平台通用組件 (純 UIComponent)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;├── GameStage/ &lt;span style="color:#75715e"&gt;# 遊戲表演組件 (純 UIComponent)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;└── Shared/ &lt;span style="color:#75715e"&gt;# 共用模組&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;App：負責組合、調度各個模組，等於是專案的大腦。&lt;/li&gt;
&lt;li&gt;GameAPI：只放介面定義，跨模組通訊與擴充。&lt;/li&gt;
&lt;li&gt;GameRunner / GameStage：都是純 UIComponent (基本都是 Mono)。&lt;/li&gt;
&lt;li&gt;Shared：共用邏輯、工具類、資料結構都放這裡。&lt;/li&gt;
&lt;li&gt;_Debug：僅用於測試、debug，正式版本不打包。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="module-模組以單一模組為例"&gt;Module 模組（以單一模組為例）&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;module-root/
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;├── Res/ &lt;span style="color:#75715e"&gt;# 模組獨立資源&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;└── Scripts/ &lt;span style="color:#75715e"&gt;# 腳本程式碼&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ├── Editor/ &lt;span style="color:#75715e"&gt;# 編輯器相關&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; └── Runtime/ &lt;span style="color:#75715e"&gt;# 執行時相關&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Res：模組內專屬資源包。&lt;/li&gt;
&lt;li&gt;Scripts/Editor：編輯器工具。&lt;/li&gt;
&lt;li&gt;Scripts/Runtime：模組實際邏輯，遊戲執行時會用到的部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="app-runtime運行時架構"&gt;App-Runtime（運行時架構）&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;App-Runtime-root/
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;├── Configs/ &lt;span style="color:#75715e"&gt;# 配置與定義&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;├── Services/ &lt;span style="color:#75715e"&gt;# 封裝各種業務操作&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;├── Presenters/ &lt;span style="color:#75715e"&gt;# 控制流程、狀態綁定&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;└── Stores/ &lt;span style="color:#75715e"&gt;# 狀態管理&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Configs：所有定義類、配置文件，便於集中管理。&lt;/li&gt;
&lt;li&gt;Services：將業務操作進行封裝，利於重用及維護。&lt;/li&gt;
&lt;li&gt;Presenters：類似 MVP Pattern 的 Presenter，專注於流程控制和資料流。&lt;/li&gt;
&lt;li&gt;Stores：專責狀態儲存，確保資料一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="實作體悟-1實務上的狀態變化"&gt;實作體悟 1：實務上的狀態變化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一個操作觸發多處改變（One-to-Many Updates）&lt;br&gt;
例如：用戶點擊「開始」後，同時啟動動畫、鎖定按鈕、重置分數、播放音效。&lt;/p&gt;</description></item><item><title>Software Design - Concept - Object Lifecycle Management</title><link>https://HoshikawaRyuukou.github.io/posts/software-design---concept---object-lifecycle-management/</link><pubDate>Sat, 04 Jan 2025 21:56:18 +0800</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/software-design---concept---object-lifecycle-management/</guid><description>&lt;h2 id="quick-chat"&gt;Quick Chat&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;物件生命週期管理（Object Lifecycle Management）&lt;strong&gt;是程式設計中的一個重要概念，它指的是有效控制和管理一個物件從&lt;/strong&gt;建立&lt;/strong&gt;、&lt;strong&gt;使用&lt;/strong&gt;到&lt;strong&gt;銷毀&lt;/strong&gt;的整個過程。良好的生命週期管理不僅能提升應用程式的效能，還能提高程式碼的可維護性，並有效地利用系統資源。&lt;/p&gt;
&lt;h2 id="stage"&gt;Stage&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;建立（Creation）&lt;/p&gt;
&lt;p&gt;物件被初始化並在記憶體中生成。在這個階段，程式碼通常會執行建構函式，完成必要的設定，或注入所需的依賴項。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用（Usage）&lt;/p&gt;
&lt;p&gt;物件處於活躍狀態，執行其核心功能。這段期間，應用程式會不斷地呼叫物件的方法，讀取或修改其屬性，處理各項業務邏輯。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;銷毀（Destruction）&lt;/p&gt;
&lt;p&gt;當物件不再被需要時，系統會回收其所佔用的資源。這個過程通常涉及垃圾回收機制（Garbage Collection），並釋放如檔案連線、資料庫連線等外部資源，避免資源洩漏。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="lifetime"&gt;Lifetime&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;瞬時（Transient）&lt;/p&gt;
&lt;p&gt;這種模式下的物件是一次性的。每次需要時，系統都會建立一個全新的實例。它特別適合那些不帶有狀態（Stateless）或只在短期內使用的物件，確保每次呼叫都是一個獨立乾淨的實體。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;單例（Singleton）&lt;/p&gt;
&lt;p&gt;顧名思義，在整個應用程式的執行期間，只會建立一個單一的實例。所有對該物件的請求都會共用同一個實體。這種模式常用於管理全域性資源，例如設定檔、日誌記錄器或資料庫連線池等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;範圍（Scoped）&lt;/p&gt;
&lt;p&gt;這是一種介於瞬時和單例之間的模式。物件的生命週期被限制在一個特定的作用範圍內，例如一次 HTTP 請求或一個獨立的執行單元。在該範圍內，該物件都是唯一的；但當範圍結束時，該物件就會被銷毀。這種模式非常適合在單次請求中共享狀態，同時又確保不同請求之間不會互相干擾。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Software Design - Pattern - Service Locator</title><link>https://HoshikawaRyuukou.github.io/posts/software-design---pattern---service-locator/</link><pubDate>Wed, 28 Jun 2023 16:56:18 +0800</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/software-design---pattern---service-locator/</guid><description>&lt;h2 id="quick-chat"&gt;Quick Chat&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Service Locator&lt;/strong&gt; 是一種 &lt;strong&gt;依賴尋找（Dependency Lookup）&lt;/strong&gt; 的實作方式，它確實屬於控制反轉（IoC）的一種。&lt;/p&gt;
&lt;p&gt;過去我曾頻繁使用這個模式，當時對於 DI（依賴注入）與 IoC 的概念還不熟悉，只覺得它讓依賴的取用變得非常方便，因為你可以在任何地方直接這樣取得所需物件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a8c8"&gt;var&lt;/span&gt; &lt;span style="color:#111"&gt;target&lt;/span&gt; &lt;span style="color:#111"&gt;=&lt;/span&gt; &lt;span style="color:#111"&gt;ServiceLocator&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#111"&gt;Resovle&lt;/span&gt;&lt;span style="color:#111"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#111"&gt;Target&lt;/span&gt;&lt;span style="color:#111"&gt;&amp;gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然而，這種作法存在幾個顯著問題：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;隱性依賴&lt;/strong&gt;：由於依賴的取得過程被隱藏起來，程式碼的真實依賴關係難以被一眼識別，增加了閱讀與維護的難度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;打破分層原則&lt;/strong&gt;：任何元件都可以隨意取得服務，這可能會導致 View 層級的物件存取到不屬於其範疇的業務邏輯，破壞了應用程式的架構分層。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此，當我對 DI 與 IoC 的概念更加熟悉，並開始使用 DI/IoC Container 後，就逐漸棄用了 Service Locator 這個模式。&lt;/p&gt;
&lt;h2 id="situation"&gt;Situation&lt;/h2&gt;
&lt;p&gt;這次的專案讓我重新思考了 Service Locator 的價值。我發現它非常適合做為從 &lt;strong&gt;Singleton 過渡到 DI/IoC Container&lt;/strong&gt; 的中間階段。&lt;/p&gt;
&lt;p&gt;我們目前專案嚴重依賴 Singleton 模式，團隊成員也已經習慣了這種寫法。若要直接切換到 DI/IoC Container，勢必會引發不小的陣痛期。&lt;/p&gt;
&lt;p&gt;在這種情況下，Service Locator 成了理想的過渡方案，理由如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;寫法近似 Singleton&lt;/strong&gt;：它的使用方式與靜態的 Singleton 模式極為相似，能讓團隊成員無痛轉換，降低學習成本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快速感受 IoC 好處&lt;/strong&gt;：儘管只是過渡，但它能讓團隊成員立即感受到集中管理依賴所帶來的便利性，為後續全面採用 DI/IoC Container 鋪路。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集中管理依賴&lt;/strong&gt;：它提供一個中央註冊點，讓所有依賴關係被統一看管。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="practice"&gt;Practice&lt;/h2&gt;
&lt;p&gt;這種模式使用一個中央註冊表（&lt;strong&gt;Service Locator&lt;/strong&gt;）來根據請求返回執行特定任務所需的物件。&lt;/p&gt;
&lt;p&gt;以下是一個簡化版的實作範例，它有別於一般的 IoC Container，具有以下特色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不強制介面實作&lt;/strong&gt;：註冊的物件可以不必實作特定介面。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;單純的容器&lt;/strong&gt;：主要功能就是作為物件的儲存庫。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不使用反射&lt;/strong&gt;：為避免效能開銷，它搭配一個 &lt;strong&gt;Installer（組合根）&lt;/strong&gt; 來進行物件的註冊。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// 這裡透過 static 達成全域存取&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a8c8"&gt;public&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;class&lt;/span&gt; &lt;span style="color:#75af00"&gt;ServiceLocator&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#111"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;private&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;static&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;readonly&lt;/span&gt; &lt;span style="color:#111"&gt;Dictionary&lt;/span&gt;&lt;span style="color:#111"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#111"&gt;Type&lt;/span&gt;&lt;span style="color:#111"&gt;,&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;object&lt;/span&gt;&lt;span style="color:#111"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#111"&gt;instances&lt;/span&gt; &lt;span style="color:#111"&gt;=&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;new&lt;/span&gt; &lt;span style="color:#111"&gt;Dictionary&lt;/span&gt;&lt;span style="color:#111"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#111"&gt;Type&lt;/span&gt;&lt;span style="color:#111"&gt;,&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;object&lt;/span&gt;&lt;span style="color:#111"&gt;&amp;gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 註冊服務&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;public&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;static&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;void&lt;/span&gt; &lt;span style="color:#111"&gt;Register&lt;/span&gt;&lt;span style="color:#111"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#111"&gt;T&lt;/span&gt;&lt;span style="color:#111"&gt;&amp;gt;(&lt;/span&gt;&lt;span style="color:#111"&gt;T&lt;/span&gt; &lt;span style="color:#111"&gt;instance&lt;/span&gt;&lt;span style="color:#111"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;instances&lt;/span&gt;&lt;span style="color:#111"&gt;[&lt;/span&gt;&lt;span style="color:#00a8c8"&gt;typeof&lt;/span&gt;&lt;span style="color:#111"&gt;(&lt;/span&gt;&lt;span style="color:#111"&gt;T&lt;/span&gt;&lt;span style="color:#111"&gt;)]&lt;/span&gt; &lt;span style="color:#111"&gt;=&lt;/span&gt; &lt;span style="color:#111"&gt;instance&lt;/span&gt;&lt;span style="color:#111"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 尋找服務&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;public&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;static&lt;/span&gt; &lt;span style="color:#111"&gt;T&lt;/span&gt; &lt;span style="color:#111"&gt;Resolve&lt;/span&gt;&lt;span style="color:#111"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#111"&gt;T&lt;/span&gt;&lt;span style="color:#111"&gt;&amp;gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;if&lt;/span&gt; &lt;span style="color:#111"&gt;(&lt;/span&gt;&lt;span style="color:#111"&gt;instances&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#111"&gt;TryGetValue&lt;/span&gt;&lt;span style="color:#111"&gt;(&lt;/span&gt;&lt;span style="color:#00a8c8"&gt;typeof&lt;/span&gt;&lt;span style="color:#111"&gt;(&lt;/span&gt;&lt;span style="color:#111"&gt;T&lt;/span&gt;&lt;span style="color:#111"&gt;),&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;out&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;var&lt;/span&gt; &lt;span style="color:#111"&gt;instance&lt;/span&gt;&lt;span style="color:#111"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;return&lt;/span&gt; &lt;span style="color:#111"&gt;(&lt;/span&gt;&lt;span style="color:#111"&gt;T&lt;/span&gt;&lt;span style="color:#111"&gt;)&lt;/span&gt;&lt;span style="color:#111"&gt;instance&lt;/span&gt;&lt;span style="color:#111"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;throw&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;new&lt;/span&gt; &lt;span style="color:#111"&gt;Exception&lt;/span&gt;&lt;span style="color:#111"&gt;(&lt;/span&gt;&lt;span style="color:#d88200"&gt;$&amp;#34;Service of type {typeof(T)} is not registered.&amp;#34;&lt;/span&gt;&lt;span style="color:#111"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 釋放服務 (可選)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;public&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;static&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;void&lt;/span&gt; &lt;span style="color:#111"&gt;Release&lt;/span&gt;&lt;span style="color:#111"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#111"&gt;T&lt;/span&gt;&lt;span style="color:#111"&gt;&amp;gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;if&lt;/span&gt; &lt;span style="color:#111"&gt;(&lt;/span&gt;&lt;span style="color:#111"&gt;instances&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#111"&gt;ContainsKey&lt;/span&gt;&lt;span style="color:#111"&gt;(&lt;/span&gt;&lt;span style="color:#00a8c8"&gt;typeof&lt;/span&gt;&lt;span style="color:#111"&gt;(&lt;/span&gt;&lt;span style="color:#111"&gt;T&lt;/span&gt;&lt;span style="color:#111"&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;instances&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#111"&gt;Remove&lt;/span&gt;&lt;span style="color:#111"&gt;(&lt;/span&gt;&lt;span style="color:#00a8c8"&gt;typeof&lt;/span&gt;&lt;span style="color:#111"&gt;(&lt;/span&gt;&lt;span style="color:#111"&gt;T&lt;/span&gt;&lt;span style="color:#111"&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#111"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// 由 Installer 集中註冊物件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a8c8"&gt;public&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;class&lt;/span&gt; &lt;span style="color:#75af00"&gt;DemoBasicServiceLocatorsInstaller&lt;/span&gt; &lt;span style="color:#111"&gt;:&lt;/span&gt; &lt;span style="color:#111"&gt;MonoBehaviour&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#111"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;public&lt;/span&gt; &lt;span style="color:#111"&gt;DemoBasicMoneyUI&lt;/span&gt; &lt;span style="color:#111"&gt;moneyUI&lt;/span&gt;&lt;span style="color:#111"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;public&lt;/span&gt; &lt;span style="color:#111"&gt;MoneyType&lt;/span&gt; &lt;span style="color:#111"&gt;moneyType&lt;/span&gt;&lt;span style="color:#111"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;public&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;int&lt;/span&gt; &lt;span style="color:#111"&gt;moneyValue&lt;/span&gt; &lt;span style="color:#111"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;&lt;span style="color:#111"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;void&lt;/span&gt; &lt;span style="color:#111"&gt;Start&lt;/span&gt;&lt;span style="color:#111"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;switch&lt;/span&gt; &lt;span style="color:#111"&gt;(&lt;/span&gt;&lt;span style="color:#111"&gt;moneyType&lt;/span&gt;&lt;span style="color:#111"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;case&lt;/span&gt; &lt;span style="color:#111"&gt;MoneyType&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#111"&gt;Real&lt;/span&gt;&lt;span style="color:#111"&gt;:&lt;/span&gt; &lt;span style="color:#111"&gt;ServiceLocator&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#111"&gt;Register&lt;/span&gt;&lt;span style="color:#111"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#111"&gt;IMoneyFormatConverter&lt;/span&gt;&lt;span style="color:#111"&gt;&amp;gt;(&lt;/span&gt;&lt;span style="color:#00a8c8"&gt;new&lt;/span&gt; &lt;span style="color:#111"&gt;RealMoneyFormatConverter&lt;/span&gt;&lt;span style="color:#111"&gt;());&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;break&lt;/span&gt;&lt;span style="color:#111"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;case&lt;/span&gt; &lt;span style="color:#111"&gt;MoneyType&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#111"&gt;Coin&lt;/span&gt;&lt;span style="color:#111"&gt;:&lt;/span&gt; &lt;span style="color:#111"&gt;ServiceLocator&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#111"&gt;Register&lt;/span&gt;&lt;span style="color:#111"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#111"&gt;IMoneyFormatConverter&lt;/span&gt;&lt;span style="color:#111"&gt;&amp;gt;(&lt;/span&gt;&lt;span style="color:#00a8c8"&gt;new&lt;/span&gt; &lt;span style="color:#111"&gt;CoinMoneyFormatConverter&lt;/span&gt;&lt;span style="color:#111"&gt;());&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;break&lt;/span&gt;&lt;span style="color:#111"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;default&lt;/span&gt;&lt;span style="color:#111"&gt;:&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;throw&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;new&lt;/span&gt; &lt;span style="color:#111"&gt;System&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#111"&gt;NotImplementedException&lt;/span&gt;&lt;span style="color:#111"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;moneyUI&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#111"&gt;Show&lt;/span&gt;&lt;span style="color:#111"&gt;(&lt;/span&gt;&lt;span style="color:#111"&gt;moneyValue&lt;/span&gt;&lt;span style="color:#111"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#111"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// 在需要的地方從容器取得服務&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a8c8"&gt;public&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;class&lt;/span&gt; &lt;span style="color:#75af00"&gt;DemoBasicMoneyUI&lt;/span&gt; &lt;span style="color:#111"&gt;:&lt;/span&gt; &lt;span style="color:#111"&gt;MonoBehaviour&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#111"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75af00"&gt; [SerializeField]&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;private&lt;/span&gt; &lt;span style="color:#111"&gt;TMP_Text&lt;/span&gt; &lt;span style="color:#111"&gt;text&lt;/span&gt;&lt;span style="color:#111"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;private&lt;/span&gt; &lt;span style="color:#111"&gt;IMoneyFormatConverter&lt;/span&gt; &lt;span style="color:#111"&gt;moneyFormatConverter&lt;/span&gt;&lt;span style="color:#111"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#00a8c8"&gt;public&lt;/span&gt; &lt;span style="color:#00a8c8"&gt;void&lt;/span&gt; &lt;span style="color:#111"&gt;Show&lt;/span&gt;&lt;span style="color:#111"&gt;(&lt;/span&gt;&lt;span style="color:#00a8c8"&gt;int&lt;/span&gt; &lt;span style="color:#111"&gt;moneyValue&lt;/span&gt;&lt;span style="color:#111"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 透過 ??= 確保只在第一次使用時尋找服務&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;moneyFormatConverter&lt;/span&gt; &lt;span style="color:#111"&gt;??=&lt;/span&gt; &lt;span style="color:#111"&gt;ServiceLocator&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#111"&gt;Resolve&lt;/span&gt;&lt;span style="color:#111"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#111"&gt;IMoneyFormatConverter&lt;/span&gt;&lt;span style="color:#111"&gt;&amp;gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;text&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#111"&gt;text&lt;/span&gt; &lt;span style="color:#111"&gt;=&lt;/span&gt; &lt;span style="color:#111"&gt;moneyFormatConverter&lt;/span&gt;&lt;span style="color:#111"&gt;.&lt;/span&gt;&lt;span style="color:#111"&gt;Convert&lt;/span&gt;&lt;span style="color:#111"&gt;(&lt;/span&gt;&lt;span style="color:#111"&gt;moneyValue&lt;/span&gt;&lt;span style="color:#111"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#111"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#111"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>Software Design - Pattern - Guard Clauses</title><link>https://HoshikawaRyuukou.github.io/posts/software-design---pattern---guard-clauses/</link><pubDate>Tue, 10 Jan 2023 21:56:18 +0800</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/software-design---pattern---guard-clauses/</guid><description>&lt;h2 id="quick-chat"&gt;Quick Chat&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;符合 Fail Fast 原則，驗證條件並在不滿足條件時立即停止執行。&lt;/li&gt;
&lt;li&gt;增加可讀性(更扁平)，減少了巢狀判斷。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="guide"&gt;Guide&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://deviq.com/design-patterns/guard-clause"&gt;Guard Clause | DevIQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://teddy-chen-tw.blogspot.com/2012/05/implementation-patterns-guard-clause.html"&gt;Implementation Patterns: Guard Clause&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codeopinion.com/stop-using-trivial-guard-clauses-try-this-instead/"&gt;Stop using trivial Guard Clauses! Try this instead&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="example"&gt;Example&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://deviq.com/design-patterns/guard-clause"&gt;Guard Clause | DevIQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="extras"&gt;Extras&lt;/h2&gt;
&lt;h3 id="guard-class"&gt;Guard Class&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ardalis/GuardClauses"&gt;GitHub - ardalis/GuardClauses&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;將通用的保護子句封裝在一個專門的類是一種很好的做法，可重用邏輯並編寫更具可讀性的保護子句。&lt;/p&gt;
&lt;h3 id="value-object"&gt;Value Object&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codeopinion.com/stop-using-trivial-guard-clauses-try-this-instead/"&gt;Stop using trivial Guard Clauses! Try this instead&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文章作者避免瑣碎 Guard 的方式，是使用 Value Object，來避免域接受到無效參數。(YT評論區也建議閱讀，有許多不錯的討論)&lt;/p&gt;
&lt;p&gt;但不可否認的 Guard Clause 作法在大多情況下是有益的。&lt;/p&gt;</description></item><item><title>Software Design - Pattern - Data Transfer Object (DTO)</title><link>https://HoshikawaRyuukou.github.io/posts/software-design---pattern---data-transfer-object-dto/</link><pubDate>Sun, 11 Dec 2022 21:56:18 +0800</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/software-design---pattern---data-transfer-object-dto/</guid><description>&lt;h2 id="quick-chat"&gt;Quick Chat&lt;/h2&gt;
&lt;p&gt;DTO，即數據傳輸物件，是在系統各層（如 API 層與業務邏輯層）或不同服務之間傳遞資料的專用物件。它像一個純粹的「數據包裹」，只負責承載數據，不包含任何業務邏輯。&lt;/p&gt;
&lt;h2 id="guide"&gt;Guide&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/archive/msdn-magazine/2009/august/pros-and-cons-of-data-transfer-objects"&gt;Cutting Edge - Pros and Cons of Data Transfer Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://examples.javacodegeeks.com/the-dto-data-transfer-object/"&gt;The DTO (Data Transfer Object)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aspnetboilerplate.com/Pages/Documents/Data-Transfer-Objects"&gt;Data Transfer Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/52812337/clean-architecture-why-not-using-the-entity-as-request-model-of-the-use-case"&gt;Clean Architecture : why not using the entity as request model of the use case (interactor)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/39397147/difference-between-entity-and-dto"&gt;Difference between Entity and DTO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="advantages"&gt;Advantages&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;建立清晰邊界，降低耦合&lt;/strong&gt;：DTO 作為公開的數據契約，讓內部資料庫結構 (Entity) 可以自由修改，而不直接影響外部的客戶端或服務。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;精準控制數據，提升安全性與&lt;/strong&gt;：只暴露客戶端真正需要的欄位，避免洩漏如密碼雜湊、內部 ID 等敏感或不相關的實作細節。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;優化傳輸效率&lt;/strong&gt;：可以匯集多個來源的資料於一身，或只傳送部分欄位，以此減少網路請求次數與數據傳輸量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;簡化序列化&lt;/strong&gt;：因為 DTO 是單純的數據容器，不含複雜的業務邏輯或循環引用，所以能輕易地被序列化為 JSON 或 XML 等格式，在網路上順利傳輸。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="trade-off"&gt;Trade-off&lt;/h2&gt;
&lt;p&gt;需要額外定義 DTO 類別與轉換邏輯，增加了程式碼量。在極簡單的應用中可能顯得過度設計。&lt;/p&gt;</description></item></channel></rss>