<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Network on 識之箱庭</title><link>https://HoshikawaRyuukou.github.io/tags/network/</link><description>Recent content in Network on 識之箱庭</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>HoshikawaRyuukou</copyright><lastBuildDate>Thu, 22 Jun 2023 20:20:00 +0000</lastBuildDate><atom:link href="https://HoshikawaRyuukou.github.io/tags/network/index.xml" rel="self" type="application/rss+xml"/><item><title>Network - WebP</title><link>https://HoshikawaRyuukou.github.io/posts/network-webp/</link><pubDate>Thu, 22 Jun 2023 20:20:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/network-webp/</guid><description>設計目標 Google 以縮減線上影像的檔案大小為目標，同時維持不輸 JPEG、PNG、GIF 格式的圖片品質。
網站的瀏覽與速度不僅影響使用者的耐心，也會影響 SEO 的排名與檢索，透過顯著縮減相片和圖形大小，網頁就能加快載入速度，提供更優質的使用者體驗。
並持續在優化 WebP 2: experimental successor of the WebP image format
壓縮方式 有損壓縮 無失真壓縮 Ref WebP 檔案 Now in REALITY Tech #6 画像をWebP形式に対応した話 Now in REALITY Tech #37 UnityでWebPを扱えるようにした話</description></item><item><title>Network - Note</title><link>https://HoshikawaRyuukou.github.io/posts/network-note/</link><pubDate>Wed, 04 Jan 2023 13:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/network-note/</guid><description> 【白话科普】域名？网址？原来域名是这么个玩意啊！ DNS工作原理 | 什么是DNS 它如何工作 CDN是什么 | CDN的工作机制 数字签名和CA数字证书的核心原理和作用 VPN概念，技术原理和误区 哈希究竟代表什么？哈希表和哈希函数的核心原理 交换机的核心工作原理 | 集线器、2层交换机和3层交换机的主要区别 你管这破玩意叫网络？ 从设计者的思考角度出发理解网络，合理、靠谱！</description></item><item><title>Network - RPC</title><link>https://HoshikawaRyuukou.github.io/posts/network-rpc/</link><pubDate>Mon, 07 Nov 2022 21:06:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/network-rpc/</guid><description>RPC (Remote Procedure Call，遠端程序呼叫) 是一種通信協定，多用於分佈式系統的通信。
目的 讓客戶端呼叫遠程函式就像呼叫本地函式一樣。將網路通信封裝成函式來使用，那麼客戶端將不需要關心網路協定/模型。
流程 client 客戶端通過本地呼叫的方式呼叫服務 client stub 接收到請求後將參數序列化成能夠進行網路傳輸的訊息體 client stub 找到服務地址，並將訊息發送給服務端 server stub 收到訊息後進行反序列化 server stub 根據反序列化結果呼叫本地服務 本地服務執行並將處理結果返回給 server stub server stub 將結果序列化並發送至 client stub client stub 接收到訊息，並進行反序列化 client 得到最終結果 Ref 怎么理解rpc，既然有http请求了为啥还要用rpc？ 谁能用通俗的语言解释一下什么是 RPC 框架？</description></item></channel></rss>