<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Workflow on 識之箱庭</title><link>https://HoshikawaRyuukou.github.io/tags/workflow/</link><description>Recent content in Workflow on 識之箱庭</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>HoshikawaRyuukou</copyright><lastBuildDate>Sat, 19 Oct 2024 19:11:00 +0000</lastBuildDate><atom:link href="https://HoshikawaRyuukou.github.io/tags/workflow/index.xml" rel="self" type="application/rss+xml"/><item><title>Workflow - Send messages to Telegram via GitHub Actions</title><link>https://HoshikawaRyuukou.github.io/posts/workflow-send-messages-to-telegram-via-github-actions/</link><pubDate>Sat, 19 Oct 2024 19:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/workflow-send-messages-to-telegram-via-github-actions/</guid><description>Quick Chat 以下範例為 :
在 git push 後透過 Github Actions 將 tag + commit 訊息發送到指定的 Telegram 群組
設置 Telegram Bot 在 Telegram 中搜尋 @BotFather 並建立一個新的 bot，記下 API token。 將 bot 加入群組並發送訊息給 bot 使用 https://api.telegram.org/bot&amp;lt;YourBotToken&amp;gt;/getUpdates 來獲取群組 ID。 設置 GitHub Secrets GitHub 專案中
Settings -&amp;gt; Security -&amp;gt; Secrets and variables -&amp;gt; Actions -&amp;gt; Repository secrets
新增以下 secrets :
TELEGRAM_BOT_TOKEN : Telegram Bot Token TELEGRAM_CHAT_ID : Telegram 群組 ID 設置 GitHub Variables GitHub 專案中</description></item><item><title>Workflow - Create a template for full-stack monorepo</title><link>https://HoshikawaRyuukou.github.io/posts/workflow-create-a-template-for-full-stack-monorepo/</link><pubDate>Fri, 11 Oct 2024 09:13:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/workflow-create-a-template-for-full-stack-monorepo/</guid><description>Structure project-root/ ├── pnpm-workspace.yaml ├── scripts/ ├── apps/ | ├── cli/ | ├── web/ (vue) | └── desktop/ (electron) └── packages/ ├── pkg01/ └── pkg02/ scripts 全域工作區命令。 apps 每個子資料夾代表一個最終的應用場景(終端)。 packages 專注於封裝和共享具體的功能模組，為各個終端應用提供支援。</description></item><item><title>Workflow - Create a monorepo with pnpm workspace</title><link>https://HoshikawaRyuukou.github.io/posts/workflow-create-a-monorepo-with-pnpm-workspace/</link><pubDate>Sun, 06 Oct 2024 20:31:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/workflow-create-a-monorepo-with-pnpm-workspace/</guid><description>Guide Monorepo与pnpm：前端项目管理的完美搭档 为什么 pnpm+monorepo 是组件库项目的最佳实践 Monorepo？來聊聊另一種專案管理架構吧！ 从npm版本依赖到Monorepo大仓项目 MonoRepo实战：pnpm+nx搭建MonoRepo项目 Create a monorepo using PNPM workspace 从构建到发布：Monorepo 的最佳实践 TSTemplateMonorepo pnpm monorepo 搭建工具库 專案基本結構 project-root/ # 專案根目錄 ├── pnpm-workspace.yaml # pnpm 的工作區配置文件，用來定義哪些資料夾屬於工作區範圍 ├── package.json # 專案的全局配置文件，通常包括依賴、腳本和項目元數據 └── packages/ # 所有子包的資料夾，存放具體的子項目 ├── pkg01/ # 子包01，包含它自己的 package.json 文件和代碼 └── pkg02/ # 子包02，與 pkg01 結構相似，也擁有自己的 package.json 和代碼 新增 專案內全局配置 ./package.json # 產生一個基本的 package.json pnpm init monorepo 的全局 package.json 設置 &amp;quot;private&amp;quot;: true { &amp;#34;private&amp;#34;: true, } 新增 工作區配置文件 .</description></item><item><title>Workflow - Optimize a monorepo with pnpm and Turborepo</title><link>https://HoshikawaRyuukou.github.io/posts/workflow-optimize-a-monorepo-with-pnpm-and-turborepo/</link><pubDate>Sun, 06 Oct 2024 20:31:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/workflow-optimize-a-monorepo-with-pnpm-and-turborepo/</guid><description>Guide</description></item><item><title>Workflow - Generate a Github Packages Access Token</title><link>https://HoshikawaRyuukou.github.io/posts/workflow-generate-a-github-packages-access-token/</link><pubDate>Sun, 06 Oct 2024 20:13:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/workflow-generate-a-github-packages-access-token/</guid><description>Steps 切換到 github 用戶號 (不是組織號) Settings/Developer Settings Personal access tokens (classic) 僅啟用 read:packagesDownload packages from GitHub Package Registry To-do 改用更推薦的 Fine-grained personal access tokens</description></item><item><title>Workflow - Install a private npm package from Github Packages</title><link>https://HoshikawaRyuukou.github.io/posts/workflow-install-a-private-npm-package-from-github-packages/</link><pubDate>Sun, 06 Oct 2024 20:12:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/workflow-install-a-private-npm-package-from-github-packages/</guid><description>Requirement ⚠️ 向 github 組織索取訪問用的 token ⚠️ 本範例使用 npm，之後會轉使用 pnpm Window 環境變數設置 token setx GITHUB_TOKEN ghp_xxxxxxxxxxxxxxxxxxxxxxxx ⚠️ 設置後必要時重啟終端機以確保環境變數被應用 初始化 project cd project-directory npm init -y 新增 ./.npmrc ⚠️ 這裡的第二行註解是正規寫法，有特殊用途 @xxx:registry=https://npm.pkg.github.com //npm.pkg.github.com/:_authToken=&amp;#34;${GITHUB_TOKEN}&amp;#34; 安裝 package npm install @ooxx/xxx</description></item><item><title>Workflow - Publish a private npm package to Github Packages</title><link>https://HoshikawaRyuukou.github.io/posts/workflow-publish-a-private-package-to-github-packages/</link><pubDate>Sun, 06 Oct 2024 20:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/workflow-publish-a-private-package-to-github-packages/</guid><description>Requirement ⚠️ 請先確保 package 本身已是合規的配置(exports/typesVersions/files/&amp;hellip;)。 ⚠️ 本範例使用 npm，之後會轉使用 pnpm。 package.json 的必要配置 name : 需配置 @scope version : 版本號 { &amp;#34;name&amp;#34;: &amp;#34;@xxx/oooo&amp;#34;, &amp;#34;version&amp;#34;: &amp;#34;0.1.0&amp;#34;, } 新增 ./.npmrc @xxx:registry=https://npm.pkg.github.com 編寫 ./.github/workflows/publish-package.yml name: Publish Package on: workflow_dispatch: push: branches: - main jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v4 - uses: actions/setup-node@v4 with: node-version: &amp;#39;20&amp;#39; registry-url: &amp;#39;https://npm.pkg.github.com/&amp;#39; - run: npm ci - run: npm run build - run: npm publish env: NODE_AUTH_TOKEN: ${{ secrets.</description></item><item><title>Workflow - Vite + Vue3 + Electron</title><link>https://HoshikawaRyuukou.github.io/posts/workflow-vite-+-vue3-+-electron/</link><pubDate>Sat, 28 Sep 2024 20:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/workflow-vite-+-vue3-+-electron/</guid><description>Step 1: 準備一個 Vite + Vue3 專案 使用 vite 指令創建空專案
pnpm create vite vve cd vve pnpm install pnpm dev Step 2: 配置 Electron 添加依賴 pnpm add -D electron pnpm add -D electron-builder pnpm add -D vite-plugin-electron pnpm add -D vite-plugin-electron-renderer 新增 ./electron/electron-env.d.ts declare namespace NodeJS { interface ProcessEnv { /** * The built directory structure * * ```tree * ├─┬─┬ dist * │ │ └── index.html * │ │ * │ ├─┬ dist-electron * │ │ ├── main.</description></item><item><title>Workflow - Vite + Vue3 + Github Pages</title><link>https://HoshikawaRyuukou.github.io/posts/workflow-vite-+-vue3-+-github-pages/</link><pubDate>Fri, 20 Sep 2024 20:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/workflow-vite-+-vue3-+-github-pages/</guid><description>Guide vite - 部署静态站点 [vite] 將 Vite 專案部署至 Github Pages vue3项目部署到Github 前置動作 設置 vite.config.js 中設定 Base URL export default defineConfig({ base: &amp;#39;/{repo name}}/&amp;#39;, plugins: [vue()], }); 確保靜態網頁內容無誤 pnpm build pnpm preview 部屬 方式 1 - 使用 gh-pages 套件 安裝套件 pnpm add -D gh-pages 於 package.json 編寫命令 { &amp;#34;scripts&amp;#34;: { &amp;#34;deploy2ghpages&amp;#34;: &amp;#34;gh-pages -d dist&amp;#34; }, } 執行命令 pnpm deploy2ghpages 方式 2 - 使用 github actions 編寫 .github\workflows\gh-pages.yml # 將靜態內容部署到 GitHub Pages 的簡易工作流程 name: Deploy static content to Pages on: # 僅在推送到默認分支時運行。 push: branches: [&amp;#39;main&amp;#39;] # 這個選項可以使你手動在 Action tab 頁面觸發工作流 workflow_dispatch: # 設置 GITHUB_TOKEN 的權限，以允許部署到 GitHub Pages。 permissions: contents: read pages: write id-token: write # 允許一個併發的部署 concurrency: group: &amp;#39;pages&amp;#39; cancel-in-progress: true jobs: # 單次部署的工作描述 deploy: environment: name: github-pages url: ${{ steps.</description></item></channel></rss>