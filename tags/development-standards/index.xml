<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Development Standards on 識之箱庭</title><link>https://HoshikawaRyuukou.github.io/tags/development-standards/</link><description>Recent content in Development Standards on 識之箱庭</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>HoshikawaRyuukou</copyright><lastBuildDate>Tue, 05 Nov 2024 20:11:00 +0000</lastBuildDate><atom:link href="https://HoshikawaRyuukou.github.io/tags/development-standards/index.xml" rel="self" type="application/rss+xml"/><item><title>Development Standards - Conventional Commits</title><link>https://HoshikawaRyuukou.github.io/posts/development-standards-conventional-commits/</link><pubDate>Tue, 05 Nov 2024 20:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/development-standards-conventional-commits/</guid><description>Quick Chat 以下是 Conventional Commit 的一些主要好處 :
一致性：統一提交訊息格式，便於理解和閱讀。 自動化支持：助力自動生成變更日誌，並與 CI/CD 等工具無縫整合。 版本控制友好：與 Semantic Versioning 搭配良好，根據提交類型自動升級版本。 提高溝通效率：簡明的訊息格式促進團隊內溝通與代碼審查。 歷史追蹤：規範化提交便於回溯和維護，增強項目可讀性和可維護性。 Guide Conventional Commits conventional-changelog/commitlint commitizen/cz-cli Usage samples chore(deps): add dependencies chore(deps): update pnpm to v9.12.3 chore(release): 9.12.3 ci: rename audit job feat!: the link command should add overrides</description></item><item><title>Development Standards - Semantic Versioning</title><link>https://HoshikawaRyuukou.github.io/posts/development-standards-semantic-versioning/</link><pubDate>Mon, 04 Nov 2024 20:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/development-standards-semantic-versioning/</guid><description>Guide 語意化版本 2.0.0 NPM Semver Calculator 定義 語意化版本號由以下三部分構成：
主版本號 (Major)：當發生不向後相容的變更時增加。 次版本號 (Minor)：當增加向下相容的新功能時增加。 修訂號 (Patch)：當修復向下相容的問題時增加。 例如：1.2.3 中，1 是主版本號，2 是次版本號，3 是修訂號。
預發布版本 預發布版本用於標示還不夠穩定的版本，通常是開發、測試中的版本，例如 alpha 或 beta 階段。這些標記常用於給開發者或測試者試用，在正式發布之前捕捉可能的問題。
語法上，預發布版本會附加在主版本號、次版本號、修訂號之後，以連字號 (-) 分隔，常見的標記包括：
alpha：表示非常早期、初步的版本，可能還不完整。 beta：表示功能已基本完成，正在進行測試和改進的版本。 rc (Release Candidate)：表示接近正式發布的候選版本，可能只需要進行少量修改。 例如：
1.2.3-alpha：表示這是版本 1.2.3 的一個 alpha 預發布版本。 1.2.3-beta.1：表示這是版本 1.2.3 的第一個 beta 預發布版本。 1.2.3-rc.2：表示這是版本 1.2.3 的第二個候選版本。 版本範圍 (以 npm 為例) 波浪符號 (~)
允許更新修訂號，但不更新次版本號。
例如，~1.2.3 表示可以更新到 &amp;lt;1.3.0，允許的版本包括 1.2.4、1.2.5 等。
插入符號 (^)
允許更新次版本號和修訂號，但不更改主版本號（0 版本除外）。
例如，^1.2.3 表示可以更新到 &amp;lt;2.0.0，允許的版本包括 1.3.0、1.4.5 等。
比較符號 (&amp;lt;, &amp;lt;=, &amp;gt;, &amp;gt;=)</description></item><item><title>Development Standards - README</title><link>https://HoshikawaRyuukou.github.io/posts/development-standards-readme/</link><pubDate>Tue, 18 Jun 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/development-standards-readme/</guid><description>Quick Chat 最近筆者從 Unity 轉向了 Node.js，因此花了大量時間在 npm 上尋找合適的套件。大部分的 README 都寫得很清晰，但也有少數寫得難以理解。
README 是 Repository 的門面，這是毋庸置疑的。創建一個好的自述文件，可以向用戶（包括使用者和開發者）顯示基本信息，但不應該用他們可能不需要的內容來淹沒他們。
筆者認為應該從一開始就認真對待 README，而不是在最後(專案收尾之際)才一股腦地將資訊灌入，這樣會降低其品質。
Guide 你知道對專案來說，README.md 有多麼重要嗎？ ── 工程師血淚史 README 的藝術 Markdown + Vscode Markdown All in One Markdown Preview Github Styling Template README-Template.md GitHub README Templates Strategy 為誰而寫 必須意識讀文件的人分成使用者和開發者，README 在佈局上要有明確的邊界。
以使用者角度 Tutorial Reference 以開發者角度 環境設定/測試/部署/發布方法 開發流程/編碼規範等 避免 README 過長 這個視專案而定，當 README 內容越來越多時可以考慮將其拆分至其他文檔，而 README.md 則改做為文檔的索引頁。
README.md RELEASELOG.md CHANGELOG.md CONTRIBUTING.md ./docs/Tutorials/xx.md ./docs/Examples/xx.md 避免 Header 過度使用 原本寫作時會下意識的使用不少的三級標題 ### Header
## Header2 ### Header3 分段.</description></item></channel></rss>