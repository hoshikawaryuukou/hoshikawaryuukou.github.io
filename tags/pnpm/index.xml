<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>pnpm on 識之箱庭</title><link>https://HoshikawaRyuukou.github.io/tags/pnpm/</link><description>Recent content in pnpm on 識之箱庭</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>HoshikawaRyuukou</copyright><lastBuildDate>Sun, 06 Oct 2024 20:31:00 +0000</lastBuildDate><atom:link href="https://HoshikawaRyuukou.github.io/tags/pnpm/index.xml" rel="self" type="application/rss+xml"/><item><title>Workflow - Create a monorepo with pnpm workspace</title><link>https://HoshikawaRyuukou.github.io/posts/workflow-create-a-monorepo-with-pnpm-workspace/</link><pubDate>Sun, 06 Oct 2024 20:31:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/workflow-create-a-monorepo-with-pnpm-workspace/</guid><description>Guide Monorepo与pnpm：前端项目管理的完美搭档 为什么 pnpm+monorepo 是组件库项目的最佳实践 Monorepo？來聊聊另一種專案管理架構吧！ 从npm版本依赖到Monorepo大仓项目 MonoRepo实战：pnpm+nx搭建MonoRepo项目 Create a monorepo using PNPM workspace 專案基本結構 project-root/ # 專案根目錄 ├── pnpm-workspace.yaml # pnpm 的工作區配置文件，用來定義哪些資料夾屬於工作區範圍 ├── package.json # 專案的全局配置文件，通常包括依賴、腳本和項目元數據 └── packages/ # 所有子包的資料夾，存放具體的子項目 ├── pkg01/ # 子包01，包含它自己的 package.json 文件和代碼 └── pkg02/ # 子包02，與 pkg01 結構相似，也擁有自己的 package.json 和代碼 新增 專案內全局配置 ./package.json # 產生一個基本的 package.json pnpm init monorepo 的全局 package.json 設置 &amp;quot;private&amp;quot;: true { &amp;#34;private&amp;#34;: true, } 新增 工作區配置文件 ./pnpm-workspace.yaml 該檔案聲明這是一個 Monorepo 專案。 pnpm install 自動安裝所有 package 的相依套件。 packages 字段列出了工作區包含的 package 位置。 工作區下的 package 會有各自的 package.</description></item><item><title>Workflow - Set up pnpm</title><link>https://HoshikawaRyuukou.github.io/posts/workflow-set-up-pnpm/</link><pubDate>Sun, 06 Oct 2024 20:21:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/workflow-set-up-pnpm/</guid><description>全域安裝 npm install -g pnpm Windows 環境 ⚠️ 使用 PowerShell 系統管理員 Get-ExecutionPolicy # 如果為 Restricted 則繼續進行 Set-ExecutionPolicy RemoteSigned</description></item><item><title>Node.js - Package Manager - pnpm</title><link>https://HoshikawaRyuukou.github.io/posts/node.js-package-manager-pnpm/</link><pubDate>Sat, 07 Sep 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/node.js-package-manager-pnpm/</guid><description>Guide pnpm 为什么现在我更推荐 pnpm 而不是 npm/yarn? pnpm、npm、yarn 包管理工具『优劣对比』及『环境迁移』 从pnpm工具了解整个npm包核心管理原理 為什麼 pnpm 比 npm 更快且更省空間？ Install npm i -g pnpm npm i -g pnpm@latest pnpm self-update 管理 Node.js 的執行環境 pnpm env use &amp;ndash;global lts : 安裝並使用 LTS 版本 pnpm env use &amp;ndash;global {version} : 安裝並使用指定版本 pnpm env add &amp;ndash;global {version} : 僅安裝指定版本 pnpm env remove &amp;ndash;global {version} : 移除指定版本 pnpm env list : 列舉本地所有版本 pnpm env list : 列出線上可用的版本 管理 packages pnpm outdated : 檢查套件是否有更新 pnpm update &amp;ndash;latest : 更新所有依賴至最新 pnpm store prune : 會清理掉不再被專案引用的包 workspace 指令/參數 pnpm add -wD &amp;lt;pkg&amp;gt; : 添加依賴於工作區 pnpm remove -wD &amp;lt;pkg&amp;gt; : 移除依賴從工作區 pnpm install : 安裝所有依賴 pnpm &amp;lt;commnad&amp;gt; : 執行命令 pnpm &amp;ndash;filter &amp;lt;package_selector&amp;gt; &amp;lt;command&amp;gt; : 執行 package 命令</description></item></channel></rss>