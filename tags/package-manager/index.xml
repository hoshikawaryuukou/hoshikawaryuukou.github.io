<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Package Manager on 識之箱庭</title><link>https://HoshikawaRyuukou.github.io/tags/package-manager/</link><description>Recent content in Package Manager on 識之箱庭</description><generator>Hugo</generator><language>zh-tw</language><copyright>HoshikawaRyuukou</copyright><lastBuildDate>Sun, 12 Jan 2025 21:12:00 +0000</lastBuildDate><atom:link href="https://HoshikawaRyuukou.github.io/tags/package-manager/index.xml" rel="self" type="application/rss+xml"/><item><title>Unity - Package Manager - NuGetForUnity</title><link>https://HoshikawaRyuukou.github.io/posts/unity---package-manager---nugetforunity/</link><pubDate>Sun, 12 Jan 2025 21:12:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/unity---package-manager---nugetforunity/</guid><description>&lt;h2 id="guide">Guide&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/GlitchEnzo/NuGetForUnity">GlitchEnzo/NuGetForUnity&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="config">Config&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>將資源調整放置 Packages 而不是 Assets&lt;/p>
&lt;blockquote>
&lt;p>NuGet &amp;gt; Preferences &amp;gt; Placement &amp;gt; In Packages Folder&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>調整 .gitignore&lt;/p>
&lt;pre tabindex="0">&lt;code>/Packages/nuget-packages/InstalledPackages*
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol></description></item><item><title>Unity - Package Manager - Modify A Package</title><link>https://HoshikawaRyuukou.github.io/posts/unity---package-manager---modify-a-package/</link><pubDate>Fri, 12 Jan 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/unity---package-manager---modify-a-package/</guid><description>&lt;h2 id="情境">情境&lt;/h2>
&lt;p>有需要客製化 Unity 官方 / git 直接導入 的 Package 時&lt;/p>
&lt;h2 id="操作">操作&lt;/h2>
&lt;ol>
&lt;li>至 ProjrctRoot\Library\PackageCache 找到目標的 Package&lt;/li>
&lt;li>&lt;strong>剪下貼上&lt;/strong>至 ProjrctRoot\Packages 即可&lt;/li>
&lt;/ol>
&lt;h2 id="ref">Ref&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://support.unity.com/hc/en-us/articles/9113460764052-How-can-I-modify-built-in-packages-">How can I modify built-in packages?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.csdn.net/linjf520/article/details/125738218">Unity - 如何修改一个 Package 或是如何将 Package Local化&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Unity - Package Manager - Private GitHub Repository</title><link>https://HoshikawaRyuukou.github.io/posts/unity---package-manager---private-github-repository/</link><pubDate>Sun, 24 Dec 2023 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/unity---package-manager---private-github-repository/</guid><description>&lt;h2 id="情境">情境&lt;/h2>
&lt;p>想分享私有庫但又不想去更改團隊或人員權限，Github 提供 Fine-Grained Token 能做到客製化的權限控制&lt;/p>
&lt;h2 id="操作">操作&lt;/h2>
&lt;ol>
&lt;li>至 GitHub &amp;laquo;&lt;strong>帳戶設定&lt;/strong>&amp;raquo;（非儲存庫設定）&lt;/li>
&lt;li>Developer Settings -&amp;gt; Personal Access Tokens -&amp;gt; Fine-Grained Tokens&lt;/li>
&lt;li>生成 Token (&lt;strong>Read-Only Permission&lt;/strong> for the repo &lt;strong>Content&lt;/strong>).&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d88200">&amp;#34;com.yourusername.yourpackage&amp;#34;&lt;/span>: &lt;span style="color:#d88200">&amp;#34;git+https://x-oauth-basic:&amp;lt;token&amp;gt;@&amp;lt;repo&amp;gt;?path=&amp;lt;folder&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ref">Ref&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/@dasannikov/install-unity-package-from-a-private-github-repository-9a40066b335f">Install Unity Package from a private GitHub repository&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Unity - Package Manager - Sample Workflow</title><link>https://HoshikawaRyuukou.github.io/posts/unity---package-manager---sample-workflow/</link><pubDate>Sat, 22 Apr 2023 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/unity---package-manager---sample-workflow/</guid><description>&lt;h2 id="package-samples">Package Samples&lt;/h2>
&lt;p>對應有些模組的操作比較複雜繁瑣，有時需要有一些 Sample 做參考。官方 Package Manager 有個 &amp;ldquo;半套&amp;rdquo; Sample 工作流，讓人不是很舒服。&lt;/p>
&lt;p>&lt;a href="https://docs.unity3d.com/2021.3/Documentation/Manual/cus-samples.html">官方文件&lt;/a>&lt;/p>
&lt;p>Sample 資料夾後面加了波浪號 (&lt;del>) 告訴 Unity 忽略 Samples&lt;/del> 文件夾中的內容，此類文件夾不使用.meta文件進行跟踪。忽略 Samples~ 對 Package 使用者是好的，畢竟不是每個人都需要。&lt;/p>
&lt;p>
 &lt;img src="https://HoshikawaRyuukou.github.io/images/Unity_Package_BasicStructure.png" alt="Unity_Package_BasicStructure">

&lt;/p>
&lt;p>但對 Package 開發者，畢竟 Samples 也是要進版控的，而這樣改名的作法會徒增一些重命名的提交也有點煩躁(除非在修改 Sample 的過程中完全不提交)。原先想說寫個 Samples ↔ Samples~ 切換的腳本就好，會一直有 meta 檔的警告(刪掉/改名都還是在)。&lt;/p>
&lt;p>
 &lt;img src="https://HoshikawaRyuukou.github.io/images/Unity_PackageManager_MetaWarning.png" alt="Unity_PackageManager_MetaWarning">

&lt;/p>
&lt;p>&lt;a href="https://forum.unity.com/threads/samples-in-packages-manual-setup.623080/#post-4991561">官方作法&lt;/a> 論壇中的某篇討論才記載他們的做法(倒是加到文件中阿&amp;hellip;)&lt;/p>
&lt;ul>
&lt;li>在內部確實使用了名為 Samples 的文件夾 (沒有 Samples~ )&lt;/li>
&lt;li>在推送新包版本之前通過腳本對其進行重命名(透過 CI )&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://medium.com/openupm/how-to-maintain-upm-package-part-1-7b4daf88d4c4">OpenUPM&lt;/a> 的作者也是使用類似的工作流，總之筆者也調整為上述的方式。&lt;/p>
&lt;h2 id="透過-github-actions-workflow-調整目錄名">透過 GitHub Actions Workflow 調整目錄名&lt;/h2>
&lt;p>筆者不熟 GitHub Actions/ YAML/ 文件操作，但這種初階的操作就交由 chatgpt 代勞，幫我省去不少實驗成本。這裡的操作只是堪用，應該有更好的方式。&lt;/p>
&lt;p>以下是筆者要求的條件&lt;/p>
&lt;ul>
&lt;li>想透過 GitHub Actions 中的 workflow 完成&lt;/li>
&lt;li>如果 forPackage 分支已存在則將其刪除&lt;/li>
&lt;li>從 main 建立新的 forPackage 分支&lt;/li>
&lt;li>Assets/Modules 的所有子目錄(同時有 &amp;ldquo;package.json&amp;rdquo; 與 &amp;ldquo;Samples&amp;quot;資料夾)，將該子目錄的 &amp;ldquo;Samples資料夾&amp;rdquo; 重新命名 為 &amp;ldquo;Samples~資料夾&amp;rdquo;&lt;/li>
&lt;li>並提交更新&lt;/li>
&lt;/ul>
&lt;p>將產出的 yml 做一點微調即可。主要文件操作的出錯率很高，find 指令似乎是有些眉角，等有空再回頭研究。&lt;/p></description></item></channel></rss>