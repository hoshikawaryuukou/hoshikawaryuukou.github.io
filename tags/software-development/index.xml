<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software Development on 識之箱庭</title><link>https://HoshikawaRyuukou.github.io/tags/software-development/</link><description>Recent content in Software Development on 識之箱庭</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>HoshikawaRyuukou</copyright><lastBuildDate>Mon, 12 Aug 2024 21:05:00 +0000</lastBuildDate><atom:link href="https://HoshikawaRyuukou.github.io/tags/software-development/index.xml" rel="self" type="application/rss+xml"/><item><title>Software Development- Repository Structure</title><link>https://HoshikawaRyuukou.github.io/posts/software-development-repository-structure/</link><pubDate>Mon, 12 Aug 2024 21:05:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/software-development-repository-structure/</guid><description>Quick Chat 最近筆者在開發公司的共用套件時，採了不少坑，尤其是在儲存庫結構方面。
最初選擇了 polyrepo 的結構，但隨著開發的進展，碰到了一些問題：
要確保這些獨立的 repo 配置能夠同步。 每次發佈都需要逐一更新每個套件，尤其是那些有兩三層依賴的，讓發佈變得非常繁瑣。 進行 code review 時，還要不停地在不同 repo 之間切換。 為了改善這些問題，開始研究 monorepo 的結構：
使用 pnpm workspace 來構建。 雖然 monorepo 有一些權限控管的隱憂，但因為共用套件的開發人數不多，所以目前還不用太擔心協作上的衝突。 Guide monorepo-vs-polyrepo 你很常聽到 monorepo，但為什麼要用 monorepo? monorepo Managing a full-stack, multipackage monorepo using pnpm Live types in a TypeScript monorepo Building a Typescript + NodeJS Monorepo in 2024</description></item></channel></rss>